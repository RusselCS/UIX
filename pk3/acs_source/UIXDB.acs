#library "UIXDB"

#include "zcommon.acs"

#import "8BDT.acs"

#include "SHRTFUNC.acs"
#include "UXTBWBAR.acs"

int readBlue1, readCyan1, readBlue2, readCyan2;

function void readWeaponBars(str weap) {
    // Log(s:"Called read weapon bars for weapon: ", s:weap);
    readCyan1 = -1;
    readBlue1 = -1;
    readCyan2 = -1;
    readBlue2 = -1;

    int obj;
    obj = new(StrParam(s:weap, s:"_NormalBar"));
    if(!obj) {
        obj = new(StrParam(s:weap, s:"_MugshotColor"));
    }

    if(!obj) {
        obj = new(StrParam(s:weap, s:"_ArsenalBar"));
    }

    if(obj) {
        readCyan1 = GetActorArg(obj, 0);
        readBlue1 = GetActorArg(obj, 1);
        destroy(obj);
    }

    obj = new(StrParam(s:weap, s:"_SecondBar"));
    if(!obj) {
        obj = new(StrParam(s:weap, s:"_SecondArsenalBar"));
    }

    if(obj) {
        readCyan2 = GetActorArg(obj, 0);
        readBlue2 = GetActorArg(obj, 1);
        destroy(obj);
    }
    // Log(s:"Output: ", i:cyan1, s:", ", i:blue1, s:", ", i:cyan2, s:", ", i:blue2);
}

script "UIXDB_GetWeaponProperty" (int weap, int prop) { SetResultValue(UIXDB_GetWeaponProperty_F(weap, prop)); }

#define DB_STORE 34
#define DB_STORE_2 35
#define DB_STORE_3 36
world int DB_STORE: ACCESSED_WEAPONS[];
world int DB_STORE_2: accessedWeapons[];
world int DB_STORE_3: accessCount;

#define UIX_WeapProp_Actor 0
#define UIX_WeapProp_Tag 1
#define UIX_WeapProp_Icon 2
#define UIX_WeapProp_Ammo 3
#define UIX_WeapProp_Ammo2 4
#define UIX_WeapProp_Slot 5
#define UIX_WeapProp_Cyan 6
#define UIX_WeapProp_Blue 7
#define UIX_WeapProp_Cyan2 8
#define UIX_WeapProp_Blue2 9

#define PROP_MAX 10

str busterProps[MAX_BUSTER_LIMIT][PROP_MAX];
str copyWepProps[MAX_WEAPONS_GLOBAL_LIMIT][PROP_MAX];

script "UIXDB_ClearDB" OPEN
{
    for(int i = 0; i < accessCount; i++) {
        int weap = accessedWeapons[i];
        int idx = ACCESSED_WEAPONS[weap];
        Log(s:"Clearing slot ", i:i, s:": ", s:weap);
        ACCESSED_WEAPONS[weap] = 0;
        accessedWeapons[i] = 0;
    }
    accessCount = 0;
}

function str UIXDB_GetWeaponProperty_F(str weap, int prop)
{
    int idx = ACCESSED_WEAPONS[weap];

    if(idx != 0) {
        if(idx < 0) { // busters
            idx = (-idx)-1;
            return busterProps[idx][prop];
        } else { // copyweps
            idx = idx-1;
            return copyWepProps[idx][prop];
        }
    }

    idx = findWeaponByActor(weap);
    if(idx != -1) {
        copyWepProps[idx][UIX_WeapProp_Actor] = weap;
        copyWepProps[idx][UIX_WeapProp_Tag] = getWeaponTag(idx);
        copyWepProps[idx][UIX_WeapProp_Icon] = getWeaponIcon(idx);
        copyWepProps[idx][UIX_WeapProp_Ammo] = getWeaponAmmoType(idx);
        copyWepProps[idx][UIX_WeapProp_Ammo2] = getWeaponAmmo2Type(idx);
        copyWepProps[idx][UIX_WeapProp_Slot] = getWeaponSlot(idx);

        readWeaponBars(weap);
        copyWepProps[idx][UIX_WeapProp_Cyan] = readCyan1;
        copyWepProps[idx][UIX_WeapProp_Blue] = readBlue2;
        copyWepProps[idx][UIX_WeapProp_Cyan2] = readCyan2;
        copyWepProps[idx][UIX_WeapProp_Blue2] = readBlue2;

        ACCESSED_WEAPONS[weap] = idx+1;
        accessedWeapons[accessCount++] = weap;
        return copyWepProps[idx][prop];
    }

    idx = findBusterUpgradeByActor(weap);
    if(idx != -1) {
        copyWepProps[idx][UIX_WeapProp_Actor] = weap;
        copyWepProps[idx][UIX_WeapProp_Tag] = getBusterTag(idx);
        copyWepProps[idx][UIX_WeapProp_Icon] = getBusterIcon(idx);
        copyWepProps[idx][UIX_WeapProp_Ammo] = "";
        copyWepProps[idx][UIX_WeapProp_Ammo2] = "";
        copyWepProps[idx][UIX_WeapProp_Slot] = 1;
        copyWepProps[idx][UIX_WeapProp_Cyan] = -1;
        copyWepProps[idx][UIX_WeapProp_Blue] = -1;
        copyWepProps[idx][UIX_WeapProp_Cyan2] = -1;
        copyWepProps[idx][UIX_WeapProp_Blue2] = -1;

        ACCESSED_WEAPONS[weap] = -(idx+1);
        accessedWeapons[accessCount++] = weap;
        return copyWepProps[idx][prop];
    }

    return copyWepProps[idx][prop];
}
