#library "UIXDB"

#include "zcommon.acs"

#import "8BDT.acs"

#include "SHRTFUNC.acs"
#include "UXTBWBAR.acs"

int lastWeapon_init[64];
str lastWeapon_str[64][5];
int lastWeapon_int[64][7];

#define UIX_WeapProp_Actor 0
#define UIX_WeapProp_Tag 1
#define UIX_WeapProp_Icon 2
#define UIX_WeapProp_Ammo 3
#define UIX_WeapProp_Ammo2 4

#define UIX_WeapProp_Slot 5
#define UIX_WeapProp_Cyan 6
#define UIX_WeapProp_Blue 7
#define UIX_WeapProp_Cyan2 8
#define UIX_WeapProp_Blue2 9

#define UIX_StrPropCount 5

function void setWeaponProperty(int pln, int prop, int val)
{
    if(prop < UIX_StrPropCount)
    {
        lastWeapon_str[pln][prop] = val;
        return;
    }
    lastWeapon_int[pln][prop-UIX_StrPropCount] = val;
}

function str getWeaponProperty(int pln, int prop)
{
    if(prop < UIX_StrPropCount)
    {
        return lastWeapon_str[pln][prop];
    }

    return lastWeapon_int[pln][prop-UIX_StrPropCount];
}

int readBlue1, readCyan1, readBlue2, readCyan2;

function void readWeaponBars(str weap) {
    // Log(s:"Called read weapon bars for weapon: ", s:weap);
    readCyan1 = -1;
    readBlue1 = -1;
    readCyan2 = -1;
    readBlue2 = -1;

    int obj;
    obj = new(StrParam(s:weap, s:"_NormalBar"));
    if(!obj) {
        obj = new(StrParam(s:weap, s:"_MugshotColor"));
    }

    if(!obj) {
        obj = new(StrParam(s:weap, s:"_ArsenalBar"));
    }

    if(obj) {
        readCyan1 = GetActorArg(obj, 0);
        readBlue1 = GetActorArg(obj, 1);
        destroy(obj);
    }

    obj = new(StrParam(s:weap, s:"_SecondBar"));
    if(!obj) {
        obj = new(StrParam(s:weap, s:"_SecondArsenalBar"));
    }

    if(obj) {
        readCyan2 = GetActorArg(obj, 0);
        readBlue2 = GetActorArg(obj, 1);
        destroy(obj);
    }
    // Log(s:"Output: ", i:cyan1, s:", ", i:blue1, s:", ", i:cyan2, s:", ", i:blue2);
}

script "UIX_GetCurrentWeapon" (int pln) {
    SetActivatorToPlayer(pln);
    SetResultValue(GetWeapon());
}

script "UIXDB_GetPlayerWeaponProperty" (int pln, int prop)
{
    SetResultValue(GetWeaponProperty_S(pln, prop));
}

function str GetWeaponProperty_S(int pln, int prop) {
    str newWep = ACS_NamedExecuteWithResult("UIX_GetCurrentWeapon", pln);
    
    if(lastWeapon_init[pln])
        if(StrCmp(newWep, lastWeapon_str[pln][0]) == 0)
            return getWeaponProperty(pln, prop);
    
    lastWeapon_init[pln] = 1;
    
    setWeaponProperty(pln, UIX_WeapProp_Actor, newWep);

    // [Russ] Assume the weapon will be found by the weapon table, go ahead and populate the bar colors
    readWeaponBars(newWep);
    setWeaponProperty(pln, UIX_WeapProp_Cyan, readCyan1);
    setWeaponProperty(pln, UIX_WeapProp_Blue, readBlue1);
    setWeaponProperty(pln, UIX_WeapProp_Cyan2, readCyan2);
    setWeaponProperty(pln, UIX_WeapProp_Blue2, readBlue2);

    int idx = findWeaponByActor(newWep);

    if(idx != -1) {
        setWeaponProperty(pln, UIX_WeapProp_Tag, getWeaponTag(idx));
        setWeaponProperty(pln, UIX_WeapProp_Icon, getWeaponIcon(idx));
        setWeaponProperty(pln, UIX_WeapProp_Ammo, getWeaponAmmoType(idx));
        setWeaponProperty(pln, UIX_WeapProp_Slot, getWeaponSlot(idx));
        setWeaponProperty(pln, UIX_WeapProp_Ammo2, getWeaponAmmo2Type(idx));

        return getWeaponProperty(pln, prop);
    }

    idx = findBusterUpgradeByActor(newWep);

    if(idx != -1) {
        setWeaponProperty(pln, UIX_WeapProp_Tag, getBusterTag(idx));
        setWeaponProperty(pln, UIX_WeapProp_Icon, getBusterIcon(idx));
        setWeaponProperty(pln, UIX_WeapProp_Ammo, "");
        setWeaponProperty(pln, UIX_WeapProp_Ammo2, "");

        setWeaponProperty(pln, UIX_WeapProp_Slot, 1);

        return getWeaponProperty(pln, prop);
    }

    setWeaponProperty(pln, UIX_WeapProp_Tag, "");
    setWeaponProperty(pln, UIX_WeapProp_Icon, "");
    setWeaponProperty(pln, UIX_WeapProp_Ammo, "");
    setWeaponProperty(pln, UIX_WeapProp_Ammo2, "");

    setWeaponProperty(pln, UIX_WeapProp_Slot, -1);

    return getWeaponProperty(pln, prop);
}

script "UIXDB_GetPlayerAmmo" (int pln, int type, int mode)
{
    SetResultValue(GetPlayerAmmo_S(pln, type, mode));
}

function int GetPlayerAmmo_S(int pln, int type, int mode)
{
    str ammoType;
    if(type > 0) {
        ammoType = ACS_NamedExecuteWithResult("UIXDB_GetPlayerWeaponProperty", pln, UIX_WeapProp_Ammo2);
    } else {
        ammoType = ACS_NamedExecuteWithResult("UIXDB_GetPlayerWeaponProperty", pln, UIX_WeapProp_Ammo);
    }

    if(ammoType == -1)
        return -1;
    if(StrLen(ammoType) == 0)
        return -1;

    SetActivatorToPlayer(pln);

    if(!mode)
        return CheckInventory(ammoType);

    return GetAmmoCapacity(ammoType);
}



script "UIXDB_GetAmmoBar" (int orientation, int layer, int color)
{
    SetResultValue(getAmmoBar(orientation, layer, color));
}
