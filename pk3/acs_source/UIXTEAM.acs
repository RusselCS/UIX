#library "UIXTEAM"

#include "zcommon.acs"
#include "SHRTFUNC.acs"

#import "8BDT.acs"

global int 4: ServerMAX;

#define TEAMINFO_ID_OFFS    10000
#define TEAMINFO_ID_NAME    0100
#define TEAMINFO_ID_HP1     0200
#define TEAMINFO_ID_HP2     0300
#define TEAMINFO_ID_HP3     0400
#define TEAMINFO_ID_WEI     0500
#define TEAMINFO_ID_WE1     0600
#define TEAMINFO_ID_WE2     0700
#define TEAMINFO_ID_LOC     0800
#define TEAMINFO_ID_ARR1    0900
#define TEAMINFO_ID_ARR2    1000
#define TEAMINFO_ID_ARR3    1100
#define TEAMINFO_ID_ARR4    1200
#define TEAMINFO_ID_ARR5    1300
#define TEAMINFO_ID_ARR6    1400
#define TEAMINFO_ID_MUG     1500

#define TEAMINFO_BAR_FONT 0
#define TEAMINFO_BAR_START 2
#define TEAMINFO_BAR_MAX 5

#define TEAMINFO_BARMAX 100

#define horizontal 0
#define vertical 1

#define straight 0
#define flipped 2

str TeamBarsStrings[TEAMINFO_BAR_START+TEAMINFO_BAR_MAX+1][4] = {
    // Fonts
    {"UXHPHORZ", "UXHPVERT", "UXHPHORZ", "UXHPVERT"},
    // Empty
    {"________________________________________________________________", "_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_", "________________________________________________________________", "_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_"},
    // 000-100
    {"ABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABAB", "A\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB", "BABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABA", "A\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB"},
    // 100-200
    {"CDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCD", "C\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD", "DCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDC", "C\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD"},
    // 200-300
    {"EFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEF", "E\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF", "FEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFE", "E\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF"},
    // 300-400
    {"GHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGH", "G\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH", "HGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHG", "G\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH"},
    // 400-500
    {"IJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJ", "I\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ", "JIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJI", "I\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ"},
    // copy the last one here to buffer the "max health"
    {"IJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJ", "I\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ", "JIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJI", "I\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ"},
};

script "UITweaks_TeamInfo" (int cam, int cpn, int cv)
{
    int baseAlpha = GetUserCvar(cpn, "UIX_CL_TEAMINFOALPHA");

    int stackOffs = 33;

    if(GetUserCvar(cpn, "UIX_CL_TEAMINFOSTACK"))
        stackOffs *= -1;

    if(baseAlpha == 0.0)
        terminate;

    SetActivator(cam);
    int pln = PlayerNumber();
    SetActivator(-1);

    if(pln == -1)
        terminate;

    int team = GetPlayerInfo(pln, PLAYERINFO_TEAM);
    // Log(i:team, s:" cam: ", i:cam);

    int startX = GetUserCvar(cpn, "UIX_CL_TEAMINFOOFFSX");
    int startY = -GetUserCvar(cpn, "UIX_CL_TEAMINFOOFFSY");
    int baseScale = GetUserCvar(cpn, "UIX_CL_TEAMINFOSCALE");

    SetFont("SMALLFONT");

    int curPlay = 0;

    int msgId = BASE_ID + TEAMINFO_ID_OFFS;

    bool drawName = GetUserCvar(cpn, "UIX_CL_TEAMINFOSHOWNAME");
    bool drawHealth = GetUserCvar(cpn, "UIX_CL_TEAMINFOSHOWHEALTH");
    bool drawLocation = GetUserCvar(cpn, "UIX_CL_TEAMINFOSHOWLOCATION");
    bool drawCompass = GetUserCvar(cpn, "UIX_CL_TEAMINFOSHOWCOMPASS");
    bool drawMugshot = GetUserCvar(cpn, "UIX_CL_TEAMINFOSHOWMUGSHOT");

    if(team == 255) { // Spectator

    } else {
        for(int i = 0; i < ServerMAX; i++) {
            // Log(i:i, s:" == ", i:pln);
            if(i == pln)
                continue;

            // Log(i:i, s:"in game? ", i:PlayerInGame(i));
            if(!PlayerInGame(i))
                continue;
            
            // Log(i:i, s:" team: ", i:GetPlayerInfo(i, PLAYERINFO_TEAM), s:" == ", i:team);
            if(GetPlayerInfo(i, PLAYERINFO_TEAM) != team)
                continue;

            // Log(s:"Made it into main for player ", i:i, s:" while viewing player ", i:pln);

            // many variables
            int xOffs, yOffs, baseX, baseY, nameX, nameY, barX, barY, compassX, compassY, mugX, mugY;

            int curId = msgId + curPlay;
            int plrTid = i + PLN_TID_SHRT;

            int orientation = GetUserCvar(cpn, "UIX_CL_TEAMINFODIR");
            int mirrored = GetUserCvar(cpn, "UIX_CL_TEAMINFOMIRROR") * 2;

            if(orientation == horizontal) {
                if(mirrored == straight) {
                    xOffs = 0;
                    yOffs = FixedMul(baseScale, curPlay * stackOffs);

                    baseX = startX;
                    baseY = startY - yOffs;

                    nameX = baseX;
                    nameY = baseY;

                    barX = baseX;
                    barY = baseY + FixedMul(baseScale, 8);

                    compassX = baseX+FixedMul(baseScale, 32);
                    compassY = baseY+FixedMul(baseScale, 32);

                    mugX = baseX-FixedMul(baseScale, 15);
                    mugY = baseY+FixedMul(baseScale, 10);
                } else {
                    xOffs = 0;
                    yOffs = FixedMul(baseScale, curPlay * stackOffs);

                    baseX = startX;
                    baseY = startY - yOffs;

                    nameX = baseX + FixedMul(baseScale, 32);
                    nameY = baseY;

                    barX = baseX - FixedMul(baseScale, 64);
                    barY = baseY + FixedMul(baseScale, 8);

                    compassX = baseX+FixedMul(baseScale, 32);
                    compassY = baseY+FixedMul(baseScale, 32);

                    mugX = baseX+FixedMul(baseScale, 48);
                    mugY = baseY+FixedMul(baseScale, 10);
                }
            } else {
                if(mirrored == straight) {
                    xOffs = FixedMul(baseScale, curPlay * stackOffs);
                    yOffs = 0;

                    baseX = startX + xOffs;
                    baseY = startY;

                    nameX = baseX;
                    nameY = baseY;

                    barX = baseX + FixedMul(baseScale, 8);
                    barY = baseY;

                    compassX = baseX;
                    compassY = baseY;

                    mugX = baseX+FixedMul(baseScale, 12);
                    mugY = baseY-FixedMul(baseScale, 16);
                } else {
                    xOffs = FixedMul(baseScale, curPlay * stackOffs);
                    yOffs = 0;

                    baseX = startX + xOffs;
                    baseY = startY;

                    nameX = baseX;
                    nameY = baseY;

                    barX = baseX + FixedMul(baseScale, 8);
                    barY = baseY - FixedMul(baseScale, 98);

                    compassX = baseX;
                    compassY = baseY;

                    mugX = baseX+FixedMul(baseScale, 12);
                    mugY = baseY+FixedMul(baseScale, 16);
                }
            }

            if(drawName) {
                str loc = 0;
                if(drawLocation)
                    loc = rotateLocation(i+PLN_TID_SHRT, orientation);

                if(orientation == horizontal) {
                    SetFont("SMALLFONT");
                    if(mirrored == straight) {
                        if(loc != 0) {
                            displayMessageL(StrParam(s:getPlayerName(i, orientation), s:" ", s:loc), curId+TEAMINFO_ID_NAME, nameX, nameY, baseScale, baseScale, baseAlpha);
                        } else {
                            displayMessageL(StrParam(s:getPlayerName(i, orientation)), curId+TEAMINFO_ID_NAME, nameX, nameY, baseScale, baseScale, baseAlpha);
                        }
                    } else {
                        if(loc != 0) {
                            displayMessageR(StrParam(s:loc, s:" ", s:getPlayerName(i, orientation)), curId+TEAMINFO_ID_NAME, nameX, nameY, baseScale, baseScale, baseAlpha);
                        } else {
                            displayMessageR(StrParam(s:getPlayerName(i, orientation)), curId+TEAMINFO_ID_NAME, nameX, nameY, baseScale, baseScale, baseAlpha);
                        }
                    }
                } else {
                    SetFont("ROTAFONT");
                    if(mirrored == straight) {
                        if(loc != 0) {
                            displayMessageL(StrParam(s:getPlayerName(i, orientation), s:"\n", s:loc), curId+TEAMINFO_ID_NAME, nameX, nameY, baseScale, baseScale, baseAlpha);
                        } else {
                            displayMessageL(StrParam(s:getPlayerName(i, orientation)), curId+TEAMINFO_ID_NAME, nameX, nameY, baseScale, baseScale, baseAlpha);
                        }
                    } else {
                        if(loc != 0) {
                            displayMessageU(StrParam(s:loc, s:"\n", s:getPlayerName(i, orientation)), curId+TEAMINFO_ID_NAME, nameX, nameY, baseScale, baseScale, baseAlpha);
                        } else {
                            displayMessageU(StrParam(s:getPlayerName(i, orientation)), curId+TEAMINFO_ID_NAME, nameX, nameY, baseScale, baseScale, baseAlpha);
                        }
                    }
                }
            }

            if(drawHealth) {
                int chp = GetActorProperty(plrTid, AProp_Health);

                int font = orientation + mirrored;

                if(cbmx10())
                    chp /= 10;

                if(chp > 500)
                    chp = 500;

                int tier, rem;

                if(chp <= 0) {
                    tier = 0;
                    rem = 0;
                } else {
                    tier = chp/TEAMINFO_BARMAX;
                    rem = chp%TEAMINFO_BARMAX;
                }

                int barScale = FixedMul(baseScale, 1.5);
                displayBar1M(TeamBarsStrings[TEAMINFO_BAR_START+tier][font], TeamBarsStrings[TEAMINFO_BAR_START+tier-1][font], TeamBarsStrings[TEAMINFO_BAR_FONT][font], rem, TEAMINFO_BARMAX, (orientation == horizontal && mirrored>0), curId+TEAMINFO_ID_HP1, barX, barY, barScale, barScale, baseAlpha);
            }

            if(drawCompass) {
                int baseYaw = GetActorAngle(cam) - VectorAngle(GetActorX(cam)-GetActorX(plrTid), GetActorY(cam)-GetActorY(plrTid)) + 0.25;
                int size = 16;
                int compassScale = FixedMul(baseScale, 1.3);
                int compassScaleDiff = FixedMul(baseScale, 0.3);

                int dist = (dist3D(0, i+PLN_TID_SHRT)) / 32;

                SetFont("SMALLFONT");
                displayMessage(StrParam(s:"\ca", i:dist, s:"m"), curId+TEAMINFO_ID_ARR1, compassX, compassY, compassScale-compassScaleDiff, compassScale-compassScaleDiff, baseAlpha);
                displayMessage("\c[UIXArrowBright]+", curId+TEAMINFO_ID_ARR2, compassX+FixedMul(cos(baseYaw),      size), compassY+FixedMul(sin(baseYaw),      size), compassScale, compassScale, baseAlpha);
                displayMessage("\c[UIXArrowMid]+",    curId+TEAMINFO_ID_ARR3, compassX+FixedMul(cos(baseYaw+0.1),  size), compassY+FixedMul(sin(baseYaw+0.1),  size), compassScale-compassScaleDiff, compassScale-compassScaleDiff, baseAlpha);
                displayMessage("\c[UIXArrowMid]+",    curId+TEAMINFO_ID_ARR4, compassX+FixedMul(cos(baseYaw-0.1),  size), compassY+FixedMul(sin(baseYaw-0.1),  size), compassScale-compassScaleDiff, compassScale-compassScaleDiff, baseAlpha);
                displayMessage("\c[UIXArrowDark]+",   curId+TEAMINFO_ID_ARR5, compassX+FixedMul(cos(baseYaw+0.18), size), compassY+FixedMul(sin(baseYaw+0.18), size), compassScale-2*compassScaleDiff, compassScale-2*compassScaleDiff, baseAlpha);
                displayMessage("\c[UIXArrowDark]+",   curId+TEAMINFO_ID_ARR6, compassX+FixedMul(cos(baseYaw-0.18), size), compassY+FixedMul(sin(baseYaw-0.18), size), compassScale-2*compassScaleDiff, compassScale-2*compassScaleDiff, baseAlpha);
            }

            if(drawMugshot) {
                str face = getMugshotGraphicFromTID(plrTid);
                int faceScale = FixedMul(baseScale, 3.0);
                if(face != 0)
                    if(StrLen(face) > 0)
                        displayIcon(face, curId+TEAMINFO_ID_MUG, mugX, mugY, faceScale, faceScale, baseAlpha);
            }

            // if(wep != -1) {
            //     int ammo = getWeaponAmmoType(wep);
            //     int mwe = getPlayerAmmoCapacity(i, ammo);
            //     int cwe = checkActorInventory(i+PLN_TID_SHRT, ammo);
            //     // PrintBold(i:mwe);
            //     displayIcon(getWeaponIcon(wep), curId+TEAMINFO_ID_WEI, barX+16, barY+32, 1.0, 1.0, 1.0);
            //     displayHBar("UIXWEFH", "UIXHPBH", cwe, mwe, curId+TEAMINFO_ID_WE1, curId+TEAMINFO_ID_WE2, barX+16, barY+16, 1.0, 1.0, 1.0);
            // }

            curPlay++;
        }
    }
}

// from pingbutton
function str getMugshotGraphicFromTID(int tid) {
	str class = GetActorClass(tid);

	int u = UniqueTID();
	if(!SpawnForced(StrParam(s:"PBMug_", s:class), 0, 0, 0, u, 0)) {
		return "";
	}
	Thing_Remove(u);

	return ACS_NamedExecuteWithResult(StrParam(s:"PBMug_", s:class), tid);
}

function str getPlayerName(int plr, int vert)
{
    str name = StrParam(n:1+plr);

    if(!vert)
        return name;

    bool update = false;

    str cvhorz = StrParam(s:"temp_uix_namestore_horz_", i:plr);
    str cvvert = StrParam(s:"temp_uix_namestore_vert_", i:plr);

    if(StrICmp(GetCvarString(cvhorz), name) != 0)
        update = true;

    if(update) {
        str vertName;

        vertName = rebuildName(name);

        SetCvarString(cvhorz, name);
        SetCvarString(cvvert, vertName);
        return vertName;
    }
    return GetCvarString(cvvert);
}

#define NAME_MAX 96
#define CHAR_COLOR 28

int nameSize;
int nameBuilder[NAME_MAX];

int nameColorless[NAME_MAX];
str colorSlots[NAME_MAX]; // no idea what size this should be tbh
int colorPos[NAME_MAX];

function str rebuildName(str name) {
    strCpy(a:nameBuilder, name);
    nameSize = StrLen(name);

    str outName = "";

    // for(int i = 0; i < nameSize; i++) {
    //     if(isAlphanumeric(nameBuilder[i])) {
    //         outName = StrParam(s:outName, c:nameBuilder[i]);
    //     } else {
    //         outName = StrParam(s:outName, s:"[", i:nameBuilder[i], s:"]");
    //     }
    // }

    // Log(s:outName);

    int inColor = 0;
    int colorStart;

    int colorLessSize = 0;
    int colorSize = 0;

    int i;

    for(i = 0; i < nameSize; i++) {
        switch(inColor) {
            case 0:
                if(nameBuilder[i] == CHAR_COLOR) {
                    colorPos[colorSize] = colorLessSize;
                    inColor = 1;
                } else {
                    nameColorless[colorLessSize++] = nameBuilder[i];
                }
                break;
            case 1: // check next char
                if(nameBuilder[i] == '[') {
                    colorStart = i;
                    inColor = 2;
                } else {
                    colorSlots[colorSize++] = StrParam(c:nameBuilder[i]);
                    inColor = 0;
                }
                break;
            case 2: // in big string
                if(nameBuilder[i] == ']') {
                    colorSlots[colorSize++] = StrMid(name, colorStart, i-colorStart+1);
                    // Log(s:"Ending color tag: ", s:colorSlots[colorSize-1], s:" - ", i:StrLen(colorSlots[colorSize-1]));
                    inColor = 0;
                }
                break;
        }
    }

    // for(i = 0; i < colorSize; i++) {
    //     Log(s:"Slot ", i:i, s:" - @", i:colorPos[i], s:": ", s:colorSlots[i]);
    // }

    // for(i = 0; i < colorLessSize; i++) {
    //     Log(c:nameColorless[i]);
    // }

    colorSize--;
    str ccblbsc = "-"; // currentColorBecauseLineBreaksStopColor - because acc won't let me compile with this long a var

    for(i = colorLessSize; i >= 0; i--) {

        if(nameColorless[i] != 0) {
            if(nameColorless[i] == ' ') {
                outName = StrParam(s:outName, c:'\n');
            } else {
                outName = StrParam(s:outName, s:"\c", s:ccblbsc, c:nameColorless[i], c:'\n');
            }
        }
        nameColorless[i] = 0;

        if(colorSize > 0) {
            if(i == colorPos[colorSize]) {
                ccblbsc = colorSlots[colorSize-1];
                colorSize--;
            }
        }
    }

    return outName;
}

#define LOC_SIZE_LIMIT 1000
int LOC_SIZE = 0;

str locs[LOC_SIZE_LIMIT][2];

function str rotateLocation(int tid, int vert)
{
    str loc = GetActorSectorLocation(tid, false);

    if(StrLen(loc) == 0)
        return 0;

    loc = StrParam(s:"\cf(", s:loc, s:"\cf)");

    if(!vert)
        return loc;
    
    int idx = findLoc(loc);

    if(idx == -1) {
        locs[LOC_SIZE][0] = loc;
        locs[LOC_SIZE][1] = rebuildName(loc);
        idx = LOC_SIZE++;
    }

    return locs[idx][1];
}

function int findLoc(str loc) {
    for(int i = 0; i < LOC_SIZE; i++) {
        if(StrCmp(loc, locs[i][0])==0) {
            return i;
        }
    }
    return -1;
}
