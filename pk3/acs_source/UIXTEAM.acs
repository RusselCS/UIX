#library "UIXTEAM"

#include "zcommon.acs"

#import "8BDT.acs"

#include "SHRTFUNC.acs"
#include "UXTBWBAR.acs"

#define horizontal 0
#define vertical 1

int cvOffsx;
int cvOffsy;
int cvScale;
int cvAlpha;
int cvNamesize;
int cvMirror;
int cvDir;
int cvFontdir;
int cvStack;
int cvShowname;
int cvShowhealth;
int cvShowlocation;
int cvShowlives;
int cvShowmugshot;
int cvFontIdx;
int cvReverseText;

int tiCache_Scale = MIN_INT;
int tiCache_Stack = MIN_INT;

#define STACK_OFFS 36
int tiStackOffs;

script "UITweaks_TeamInfo" (int cam, int cpn, int cv)
{
    if(!GetCvar("UIX_SV_TEAMINFO"))
        terminate;

    int baseAlpha = GetUserCvar(cpn, "UIX_CL_TEAMINFOALPHA");
    if(baseAlpha == 0.0)
        terminate;

    if(CheckActorInventory(cam, "UIX_NoTeamBar") > 0)
        terminate;

    SetActivator(cam);

    int pln = PlayerNumber();
    if(pln == -1)
        terminate;

    SetActivator(-1);

    int team = getPlayerTeam(pln);
    // Log(i:team, s:" cam: ", i:cam);

    if(team == 255) { // Spectator

    } else {
        cvOffsx = GetUserCvar(cpn, "UIX_CL_TEAMINFOOFFSX");
        cvOffsy = GetUserCvar(cpn, "UIX_CL_TEAMINFOOFFSY");
        cvScale = GetUserCvar(cpn, "UIX_CL_TEAMINFOSCALE");
        cvAlpha = baseAlpha;
        cvNamesize = GetUserCvar(cpn, "UIX_CL_TEAMINFONAMESIZE");
        cvMirror = GetUserCvar(cpn, "UIX_CL_TEAMINFOMIRROR");
        cvDir = GetUserCvar(cpn, "UIX_CL_TEAMINFODIR");
        cvFontdir = GetUserCvar(cpn, "UIX_CL_TEAMINFOFONTDIR");
        cvStack = GetUserCvar(cpn, "UIX_CL_TEAMINFOSTACK");
        cvShowname = GetUserCvar(cpn, "UIX_CL_TEAMINFOSHOWNAME");
        cvShowhealth = GetUserCvar(cpn, "UIX_CL_TEAMINFOSHOWHEALTH");
        cvShowlocation = GetUserCvar(cpn, "UIX_CL_TEAMINFOSHOWLOCATION");
        cvShowlives = GetUserCvar(cpn, "UIX_CL_TEAMINFOSHOWLIVES");
        cvShowmugshot = GetUserCvar(cpn, "UIX_CL_TEAMINFOSHOWMUGSHOT");

        cvFontIdx = cvFontdir ^ cvDir;
        cvReverseText = cvDir && !cvFontDir;

        if(tiCache_Scale != cvScale || tiCache_Stack != cvStack)
        {
            tiCache_Scale = cvScale;
            tiCache_Stack = cvStack;

            if(cvStack) {
                tiStackOffs = -1 * FixedMul(STACK_OFFS, cvScale);
            } else {
                tiStackOffs = FixedMul(STACK_OFFS, cvScale);
            }
        }

        int drawnPlayers = 0;

        for(int i = 0; i < MAX_PLAYERS_SHRT; i++) {
            // Log(i:i, s:" == ", i:pln);
            if(i == pln)
                continue;

            // Log(i:i, s:"in game? ", i:PlayerInGame(i));
            if(!PlayerInGame(i))
                continue;

            // Log(i:i, s:" team: ", i:GetPlayerInfo(i, PLAYERINFO_TEAM), s:" == ", i:team);
            if(getPlayerTeam(i) != team)
                continue;

            int baseX = cvOffsx + (cvDir ? drawnPlayers * tiStackOffs : 0);
            int baseY = cvOffsy + (!cvDir ? drawnPlayers * tiStackOffs : 0);

            drawMugshot(i, baseX, baseY);
            drawName(i, baseX, baseY);
            drawLocation(i, baseX, baseY);
            drawHealth(i, baseX, baseY);
            drawWeapon(i, baseX, baseY);
            drawLives(i, baseX, baseY);

            drawnPlayers++;
        }
    }
}

// Generic Draw constants ===========================================================================================================================
#define ROW_LENGTH 8
#define TEXT_SCALE 0.7

#define HP_LENGTH 96
#define HP_WIDTH 8

str uiFonts[2] = {
    "SMALLFNT",
    "SIDEFNTL",
};

// Draw mugshot =====================================================================================================================================
int mugCache_Scale = 0;
int mugScale;

function void drawMugshot(int pln, int x, int y)
{
    if(!cvShowmugshot)
        return;

    str face = getMugshotGraphicFromTID(pln+PLN_TID_SHRT);

    if(StrLen(face) == 0)
        return;

    if(mugCache_Scale != cvScale) {
        mugCache_Scale = cvScale;
        mugScale = FixedMul(cvScale, 4.0);
    }

    displayIcon(face, getNewUIId(), x, y, mugScale, mugScale, cvAlpha);
}

// Mugshot data pull, from pingbutton
function str getMugshotGraphicFromTID(int tid) {
	str class = GetActorClass(tid);

	int u = UniqueTID();
	if(!SpawnForced(StrParam(s:"PBMug_", s:class), 0, 0, 0, u, 0)) {
		return "";
	}
	Thing_Remove(u);

	return ACS_NamedExecuteWithResult(StrParam(s:"PBMug_", s:class), tid);
}

// Draw Name ========================================================================================================================================
#define NAME_X_00 17
#define NAME_Y_00 -11

#define NAME_X_01 -17
#define NAME_Y_01 -11

#define NAME_X_10 -8-ROW_LENGTH
#define NAME_Y_10 13

#define NAME_X_11 -8-ROW_LENGTH
#define NAME_Y_11 -20

int nameCache_Scale;
int nameCache_Mirror;
int nameCache_Dir;

int nameCache_Namesize;

int nameX;
int nameY;
int nameScale;
int nameHAlign;
int nameVAlign;

int nameLength;

function void drawName(int pln, int x, int y)
{
    if(!cvShowName)
        return;

    if(
        nameCache_Scale != cvScale ||
        nameCache_Mirror != cvMirror ||
        nameCache_Dir != cvDir ||
        nameCache_Namesize != cvNamesize
    )
    {
        nameCache_Scale = cvScale;
        nameCache_Mirror = cvMirror;
        nameCache_Dir = cvDir;
        nameCache_Namesize = cvNamesize;

        nameX = FixedMul(cvScale, (!cvDir ? (!cvMirror ? NAME_X_00 : NAME_X_01) : (!cvMirror ? NAME_X_10 : NAME_X_11)));
        nameY = FixedMul(cvScale, (!cvDir ? (!cvMirror ? NAME_Y_00 : NAME_Y_01) : (!cvMirror ? NAME_Y_10 : NAME_Y_11)));
        nameScale = FixedMul(cvScale, TEXT_SCALE);
        nameLength = FixedDiv(cvNamesize, TEXT_SCALE);
        nameHAlign = cvMirror && cvDir == horizontal ? ALIGN_RIGHT : ALIGN_LEFT;
        nameVAlign = !cvMirror && cvDir == vertical ? ALIGN_TOP : ALIGN_BOTTOM;
    }

    str name = getPlayerName(pln, cvDir, cvFontIdx);
    int plrNameLength = getCacheNameWidth(pln, cvDir, cvFontIdx);
    int nameLengthScale = 1.0;

    if(plrNameLength > nameLength) {
        nameLengthScale = FixedDiv(nameLength, plrNameLength);
    }

    int nameScaleX = cvDir ? nameScale : FixedMul(nameScale, nameLengthScale);
    int nameScaleY = !cvDir ? nameScale : FixedMul(nameScale, nameLengthScale);
    
    SetFont(uiFonts[cvFontIdx]);
    displayMessage(name, getNewUIId(), x + nameX, y + nameY, nameScaleX, nameScaleY, cvAlpha, nameHAlign, nameVAlign);
}

// Draw Location ========================================================================================================================================
#define LOC_X_00 17
#define LOC_Y_00 -11 + ROW_LENGTH

#define LOC_X_01 -17
#define LOC_Y_01 -11 + ROW_LENGTH

#define LOC_X_10 -8
#define LOC_Y_10 13

#define LOC_X_11 -8
#define LOC_Y_11 -20

int locCache_Scale;
int locCache_Mirror;
int locCache_Dir;

int locCache_Namesize;

int locX;
int locY;
int locScale;
int locHAlign;
int locVAlign;

int locLength;

function void drawLocation(int pln, int x, int y)
{
    if(!cvShowLocation)
        return;

    if(
        locCache_Scale != cvScale ||
        locCache_Mirror != cvMirror ||
        locCache_Dir != cvDir ||
        locCache_Namesize != cvNamesize
    )
    {
        locCache_Scale = cvScale;
        locCache_Mirror = cvMirror;
        locCache_Dir = cvDir;
        locCache_Namesize = cvNamesize;

        locX = FixedMul(cvScale, (!cvDir ? (!cvMirror ? LOC_X_00 : LOC_X_01) : (!cvMirror ? LOC_X_10 : LOC_X_11)));
        locY = FixedMul(cvScale, (!cvDir ? (!cvMirror ? LOC_Y_00 : LOC_Y_01) : (!cvMirror ? LOC_Y_10 : LOC_Y_11)));
        locScale = FixedMul(cvScale, TEXT_SCALE);
        locLength = FixedDiv(cvNamesize, TEXT_SCALE);        
        locHAlign = cvMirror && cvDir == horizontal ? ALIGN_RIGHT : ALIGN_LEFT;
        locVAlign = !cvMirror && cvDir == vertical ? ALIGN_TOP : ALIGN_BOTTOM;
    }

    str loc = findLocation(pln, cvDir, cvFontIdx);

    if(loc == -1)
        return;
    
    int plrLocLength = getLocWidthPlr(pln, cvDir, cvFontIdx);

    int locLengthScale = 1.0;

    if(plrLocLength > locLength) {
        locLengthScale = FixedDiv(locLength, plrLocLength);
    }

    int locScaleX = cvDir ? locScale : FixedMul(locScale, locLengthScale);
    int locScaleY = !cvDir ? locScale : FixedMul(locScale, locLengthScale);
    
    SetFont(uiFonts[cvFontIdx]);
    displayMessage(loc, getNewUIId(), x + locX, y + locY, locScaleX, locScaleY, cvAlpha, locHAlign, locVAlign);
}

// Draw Health ======================================================================================================================================
#define HP_X_00 16
#define HP_Y_00 -20+2*ROW_LENGTH

#define HP_X_01 -18-96
#define HP_Y_01 -20+2*ROW_LENGTH

#define HP_X_10 -1
#define HP_Y_10 13

#define HP_X_11 -1
#define HP_Y_11 -116

#define HP_L_CONST HP_LENGTH * 10
#define HP_W_CONST HP_WIDTH * 10

int healthCache_Scale;
int healthCache_Mirror;
int healthCache_Dir;

int healthX;
int healthY;
int healthScale;
int healthWidth;
int healthHeight;
int healthTop;
int healthBottom;

str healthBars[2][2] = {
    {"UXTEMHH1", "UXTEMHV1"},
    {"UXTEMHHB", "UXTEMHVB"}
};

int healthBarDimensions[2] = {HP_L_CONST, HP_W_CONST};

function void drawHealth(int pln, int x, int y)
{
    if(!cvShowHealth)
        return;

    int mhp = GetActorProperty(pln+PLN_TID_SHRT, AProp_SpawnHealth);
    if(mhp == 0)
        return;

    if(
        healthCache_Scale != cvScale ||
        healthCache_Mirror != cvMirror ||
        healthCache_Dir != cvDir
    )
    {
        healthCache_Scale = cvScale;
        healthCache_Mirror = cvMirror;
        healthCache_Dir = cvDir;

        healthX = FixedMul(cvScale, (!cvDir ? (!cvMirror ? HP_X_00 : HP_X_01) : (!cvMirror ? HP_X_10 : HP_X_11)));
        healthY = FixedMul(cvScale, (!cvDir ? (!cvMirror ? HP_Y_00 : HP_Y_01) : (!cvMirror ? HP_Y_10 : HP_Y_11)));
        healthScale = FixedMul(FixedMul(cvScale, 1.0), 0.1);
        healthWidth = healthBarDimensions[cvDir];
        healthHeight = healthBarDimensions[!cvDir];
    }
    
    int chp = GetActorProperty(pln+PLN_TID_SHRT, AProp_Health);

    drawBar(healthBars[0][cvDir], healthBars[1][cvDir], x+healthX, y+healthY, healthWidth, healthHeight, healthScale, healthScale, cvAlpha, chp, mhp, !cvDir+1, false, getNewUIId(), getNewUIId());
}

// Draw Weapon ======================================================================================================================================
#define WEP_ICONX_00 24
#define WEP_ICONY_00 1+2*ROW_LENGTH

#define WEP_ICONX_01 -17
#define WEP_ICONY_01 1+2*ROW_LENGTH

#define WEP_ICONX_10 -1+2*ROW_LENGTH
#define WEP_ICONY_10 54

#define WEP_ICONX_11 -1+2*ROW_LENGTH
#define WEP_ICONY_11 -15

// Bar is relative to the icon
#define WEP_BARX_00 0
#define WEP_BARY_00 -10

#define WEP_BARX_01 -36
#define WEP_BARY_01 -10

#define WEP_BARX_10 -6
#define WEP_BARY_10 -40

#define WEP_BARX_11 -6
#define WEP_BARY_11 -40

// Double bar has a different set of coords
#define WEP_BAR1X_00 0
#define WEP_BAR1Y_00 -12

#define WEP_BAR1X_01 -36
#define WEP_BAR1Y_01 -12

#define WEP_BAR1X_10 -8
#define WEP_BAR1Y_10 -40

#define WEP_BAR1X_11 -8
#define WEP_BAR1Y_11 -40

#define WEP_BAR2X_00 0
#define WEP_BAR2Y_00 -8

#define WEP_BAR2X_01 -36
#define WEP_BAR2Y_01 -8

#define WEP_BAR2X_10 -4
#define WEP_BAR2Y_10 -40

#define WEP_BAR2X_11 -4
#define WEP_BAR2Y_11 -40


#define WEP_L_CONST 28 * 10
#define WEP_W_CONST 4 * 10

#define WEP_ICON_SCALE 0.5

int weaponCache_Scale;
int weaponCache_Mirror;
int weaponCache_Dir;

int weaponIconX;
int weaponIconY;
int weaponBarX;
int weaponBarY;
int weaponBar1X;
int weaponBar1Y;
int weaponBar2X;
int weaponBar2Y;
int weaponIconScale;
int weaponBarScale;
int weaponBarWidth;
int weaponBarHeight;
int weaponBar1Top;
int weaponBar1Bottom;
int weaponBar2Top;
int weaponBar2Bottom;

int weaponBarDimensions[2] = {WEP_L_CONST, WEP_W_CONST};

// 0: init
// 1: cyan1
// 2: blue1
// 3: cyan2
// 4: blue2
//
int barColors[MAX_WEAPONS_GLOBAL_LIMIT][5];

int readBlue1, readCyan1, readBlue2, readCyan2;

function void readWeaponBars(str weap) {
    // Log(s:"Called read weapon bars for weapon: ", s:weap);
    readCyan1 = -1;
    readBlue1 = -1;
    readCyan2 = -1;
    readBlue2 = -1;

    int obj;
    obj = new(StrParam(s:weap, s:"_NormalBar"));
    if(!obj) {
        obj = new(StrParam(s:weap, s:"_MugshotColor"));
    }

    if(!obj) {
        obj = new(StrParam(s:weap, s:"_ArsenalBar"));
    }

    if(obj) {
        readCyan1 = GetActorArg(obj, 0);
        readBlue1 = GetActorArg(obj, 1);
        destroy(obj);
    }

    obj = new(StrParam(s:weap, s:"_SecondBar"));
    if(!obj) {
        obj = new(StrParam(s:weap, s:"_SecondArsenalBar"));
    }

    if(obj) {
        readCyan2 = GetActorArg(obj, 0);
        readBlue2 = GetActorArg(obj, 1);
        destroy(obj);
    }
    // Log(s:"Output: ", i:cyan1, s:", ", i:blue1, s:", ", i:cyan2, s:", ", i:blue2);
}

#define SYNC_TIME 3
str currWeap[64];

script "UIXTeam_WeaponSync" ENTER
{
    int idx;
    int pln = PlayerNumber();
    bool bar1, bar2;
    str ammo1, ammo2;
    while(GetActorProperty(0, APROP_Health) > 0) {
        if(!CheckWeapon(currWeap[pln])) {
            currWeap[pln] = GetWeapon();
            idx = findWeaponByActor(currWeap[pln]);

            if(idx != -1) {
                SetInventory("UIXCurrWeap", idx+1);
                ammo1 = getWeaponAmmoType(idx);
                ammo2 = getWeaponAmmo2Type(idx);

                bar1 = StrLen(ammo1) > 0;
                bar2 = StrLen(ammo2) > 0;
            } else {
                idx = findBusterUpgradeByActor(currWeap[pln]);
                if(idx != -1) {
                    SetInventory("UIXCurrBuster", idx+1);
                } else {
                    SetInventory("UIXCurrBuster", 0);
                }
            }
        }

        if(bar1) {
            SetInventory("UIXAmmoAmt1", CheckInventory(ammo1));
            SetInventory("UIXAmmoMax1", GetAmmoCapacity(ammo1));
        } else {
            SetInventory("UIXAmmoMax1", 0);
        }

        if(bar2) {
            SetInventory("UIXAmmoAmt2", CheckInventory(ammo2));
            SetInventory("UIXAmmoMax2", GetAmmoCapacity(ammo2));
        } else {
            SetInventory("UIXAmmoMax2", 0);
        }
        delay(SYNC_TIME);
    }
}

script "UIXTeam_WeaponSync_R" RESPAWN { ACS_NamedExecuteWithResult("UIXTeam_WeaponSync"); }

function void drawWeapon(int pln, int x, int y)
{
    if(!cvShowName)
        return;

    // int mwep = GetActorProperty(pln+PLN_TID_SHRT, AProp_SpawnWeapon);
    // if(mwep == 0)
        // return;

    if(
        weaponCache_Scale != cvScale ||
        weaponCache_Mirror != cvMirror ||
        weaponCache_Dir != cvDir
    )
    {
        weaponCache_Scale = cvScale;
        weaponCache_Mirror = cvMirror;
        weaponCache_Dir = cvDir;

        weaponIconX = FixedMul(cvScale, (!cvDir ? (!cvMirror ? WEP_ICONX_00 : WEP_ICONX_01) : (!cvMirror ? WEP_ICONX_10 : WEP_ICONX_11)));
        weaponIconY = FixedMul(cvScale, (!cvDir ? (!cvMirror ? WEP_ICONY_00 : WEP_ICONY_01) : (!cvMirror ? WEP_ICONY_10 : WEP_ICONY_11)));
        weaponBarX = weaponIconX + FixedMul(cvScale, (!cvDir ? (!cvMirror ? WEP_BARX_00 : WEP_BARX_01) : (!cvMirror ? WEP_BARX_10 : WEP_BARX_11)));
        weaponBarY = weaponIconY + FixedMul(cvScale, (!cvDir ? (!cvMirror ? WEP_BARY_00 : WEP_BARY_01) : (!cvMirror ? WEP_BARY_10 : WEP_BARY_11)));
        weaponBar1X = weaponIconX + FixedMul(cvScale, (!cvDir ? (!cvMirror ? WEP_BAR1X_00 : WEP_BAR1X_01) : (!cvMirror ? WEP_BAR1X_10 : WEP_BAR1X_11)));
        weaponBar1Y = weaponIconY + FixedMul(cvScale, (!cvDir ? (!cvMirror ? WEP_BAR1Y_00 : WEP_BAR1Y_01) : (!cvMirror ? WEP_BAR1Y_10 : WEP_BAR1Y_11)));
        weaponBar2X = weaponIconX + FixedMul(cvScale, (!cvDir ? (!cvMirror ? WEP_BAR2X_00 : WEP_BAR2X_01) : (!cvMirror ? WEP_BAR2X_10 : WEP_BAR2X_11)));
        weaponBar2Y = weaponIconY + FixedMul(cvScale, (!cvDir ? (!cvMirror ? WEP_BAR2Y_00 : WEP_BAR2Y_01) : (!cvMirror ? WEP_BAR2Y_10 : WEP_BAR2Y_11)));
        weaponBarScale = FixedMul(FixedMul(cvScale, 1.0), 0.1);
        weaponIconScale = FixedMul(WEP_ICON_SCALE, cvScale);
        weaponBarWidth = weaponBarDimensions[cvDir];
        weaponBarHeight = weaponBarDimensions[!cvDir];
    }

    int tid = pln+PLN_TID_SHRT;

    int idx = CheckActorInventory(tid, "UIXCurrWeap");
    if(idx == 0)
        idx = -CheckActorInventory(tid, "UIXCurrBuster");
    
    if(idx == 0)
        return;
    
    int amx1, amx2;
    str icon, black;    

    amx1 = CheckActorInventory(tid, "UIXAmmoMax1");
    amx2 = CheckActorInventory(tid, "UIXAmmoMax2");

    if(idx > 0) {
        idx = idx-1;

        icon = getWeaponIcon(idx);

        if(amx1 > 0) {
            if(!barColors[idx][0]) {
                readWeaponBars(getWeaponActor(idx));
    
                barColors[idx][0] = true;
                barColors[idx][1] = readCyan1;
                barColors[idx][2] = readBlue1;
                barColors[idx][3] = readCyan2;
                barColors[idx][4] = readBlue2;
            }

            if(amx2 > 0) {
                drawLayeredBar(UIXAmmoBars[2+cvDir][0][barColors[idx][1]], UIXAmmoBars[2+cvDir][1][barColors[idx][2]], black, X+weaponBar1X, Y+weaponBar1Y, weaponBarWidth, weaponBarHeight, weaponBarScale, weaponBarScale, cvAlpha, CheckActorInventory(tid, "UIXAmmoAmt1"), amx1, !cvDir+1, false, getNewUIId(), getNewUIId(), getNewUIId());
                drawLayeredBar(UIXAmmoBars[2+cvDir][0][barColors[idx][3]], UIXAmmoBars[2+cvDir][1][barColors[idx][4]], black, X+weaponBar2X, Y+weaponBar2Y, weaponBarWidth, weaponBarHeight, weaponBarScale, weaponBarScale, cvAlpha, CheckActorInventory(tid, "UIXAmmoAmt2"), amx2, !cvDir+1, false, getNewUIId(), getNewUIId(), getNewUIId());
            } else {
                drawLayeredBar(UIXAmmoBars[2+cvDir][0][barColors[idx][1]], UIXAmmoBars[2+cvDir][1][barColors[idx][2]], black, X+weaponBarX, Y+weaponBarY, weaponBarWidth, weaponBarHeight, weaponBarScale, weaponBarScale, cvAlpha, CheckActorInventory(tid, "UIXAmmoAmt1"), amx1, !cvDir+1, false, getNewUIId(), getNewUIId(), getNewUIId());
            }
        }
        black = UIXAmmoBars[2+cvDir][2][0];
    } else {
        idx = (-idx)-1;

        icon = getBusterIcon(idx);
    }
    displayIcon(icon, getNewUIId(), x+weaponIconX, y+weaponIconY, weaponIconScale, weaponIconScale, cvAlpha);

    // str icon = ACS_NamedExecuteWithResult("UIXDB_GetPlayerWeaponProperty", pln, UIX_WeapProp_Icon);

    // int amt1 = ACS_NamedExecuteWithResult("UIXDB_GetPlayerAmmo", pln, 0, 0);

    // if(amt1 != -1) {
    //     int amx1 = ACS_NamedExecuteWithResult("UIXDB_GetPlayerAmmo", pln, 0, 1);

    //     str cyan = ACS_NamedExecuteWithResult("UIXDB_GetAmmoBar", 2+cvDir, 0, ACS_NamedExecuteWithResult("UIXDB_GetPlayerWeaponProperty", pln, UIX_WeapProp_Cyan));
    //     str blue = ACS_NamedExecuteWithResult("UIXDB_GetAmmoBar", 2+cvDir, 1, ACS_NamedExecuteWithResult("UIXDB_GetPlayerWeaponProperty", pln, UIX_WeapProp_Blue));

    //     str black = ACS_NamedExecuteWithResult("UIXDB_GetAmmoBar", 2+cvDir, 2);

    //     int amt2 = ACS_NamedExecuteWithResult("UIXDB_GetPlayerAmmo", pln, 1, 0);

    //     if(amt2 != -1) {
    //         int amx2 = ACS_NamedExecuteWithResult("UIXDB_GetPlayerAmmo", pln, 1, 1);
    //         str cyan2 = ACS_NamedExecuteWithResult("UIXDB_GetAmmoBar", 2+cvDir, 0, ACS_NamedExecuteWithResult("UIXDB_GetPlayerWeaponProperty", pln, UIX_WeapProp_Cyan2));
    //         str blue2 = ACS_NamedExecuteWithResult("UIXDB_GetAmmoBar", 2+cvDir, 1, ACS_NamedExecuteWithResult("UIXDB_GetPlayerWeaponProperty", pln, UIX_WeapProp_Blue2));

    //         drawLayeredBar(cyan, blue, black, X+weaponBar1X, Y+weaponBar1Y, weaponBarWidth, weaponBarHeight, weaponBarScale, weaponBarScale, cvAlpha, amt1, amx1, !cvDir+1, false, getNewUIId(), getNewUIId(), getNewUIId());
    //         drawLayeredBar(cyan2, blue2, black, X+weaponBar2X, Y+weaponBar2Y, weaponBarWidth, weaponBarHeight, weaponBarScale, weaponBarScale, cvAlpha, amt1, amx1, !cvDir+1, false, getNewUIId(), getNewUIId(), getNewUIId());
    //     } else {
    //         drawLayeredBar(cyan, blue, black, X+weaponBarX, Y+weaponBarY, weaponBarWidth, weaponBarHeight, weaponBarScale, weaponBarScale, cvAlpha, amt1, amx1, !cvDir+1, false, getNewUIId(), getNewUIId(), getNewUIId());
    //     }
    // }

    // displayIcon(icon, getNewUIId(), x+weaponIconX, y+weaponIconY, weaponIconScale, weaponIconScale, cvAlpha);
}

// Draw Lives =======================================================================================================================================
#define LIVES_X_00 117
#define LIVES_Y_00 5+ROW_LENGTH

#define LIVES_X_01 -105
#define LIVES_Y_01 5+ROW_LENGTH

#define LIVES_X_10 -1+2*ROW_LENGTH
#define LIVES_Y_10 94

#define LIVES_X_11 -1+2*ROW_LENGTH
#define LIVES_Y_11 -92

#define LIVES_TEXT_X_00 -16
#define LIVES_TEXT_Y_00 0

#define LIVES_TEXT_X_01 12-4
#define LIVES_TEXT_Y_01 0

#define LIVES_TEXT_X_10 -7
#define LIVES_TEXT_Y_10 1

#define LIVES_TEXT_X_11 -7
#define LIVES_TEXT_Y_11 -10

#define LIVES_OFFS 9

int livesCache_Scale;
int livesCache_Mirror;
int livesCache_Dir;

int livesX;
int livesY;
int livesTextX;
int livesTextY;
int livesScale;
int livesOffsX;
int livesOffsY;
int livesTextScale;
int livesTextHAlign;
int livesTextVAlign;
int livesOverflowX;
int livesOverflowY;

int maxLives = -1;

script "UITweaks_TeamInfo_MaxLives" OPEN CLIENTSIDE
{
    if(GetCvar("lastmanstanding") || GetCvar("teamlms")) {
        maxLives = GetCvar("sv_maxlives");
    }
}

str livesIcons[2][256] = {
    { // cyan
        "UXTLVC00","UXTLVC01","UXTLVC02","UXTLVC03","UXTLVC04","UXTLVC05","UXTLVC06","UXTLVC07","UXTLVC08","UXTLVC09","UXTLVC0A","UXTLVC0B","UXTLVC0C","UXTLVC0D","UXTLVC0E","UXTLVC0F",
        "UXTLVC10","UXTLVC11","UXTLVC12","UXTLVC13","UXTLVC14","UXTLVC15","UXTLVC16","UXTLVC17","UXTLVC18","UXTLVC19","UXTLVC1A","UXTLVC1B","UXTLVC1C","UXTLVC1D","UXTLVC1E","UXTLVC1F",
        "UXTLVC20","UXTLVC21","UXTLVC22","UXTLVC23","UXTLVC24","UXTLVC25","UXTLVC26","UXTLVC27","UXTLVC28","UXTLVC29","UXTLVC2A","UXTLVC2B","UXTLVC2C","UXTLVC2D","UXTLVC2E","UXTLVC2F",
        "UXTLVC30","UXTLVC31","UXTLVC32","UXTLVC33","UXTLVC34","UXTLVC35","UXTLVC36","UXTLVC37","UXTLVC38","UXTLVC39","UXTLVC3A","UXTLVC3B","UXTLVC3C","UXTLVC3D","UXTLVC3E","UXTLVC3F",
        "UXTLVC40","UXTLVC41","UXTLVC42","UXTLVC43","UXTLVC44","UXTLVC45","UXTLVC46","UXTLVC47","UXTLVC48","UXTLVC49","UXTLVC4A","UXTLVC4B","UXTLVC4C","UXTLVC4D","UXTLVC4E","UXTLVC4F",
        "UXTLVC50","UXTLVC51","UXTLVC52","UXTLVC53","UXTLVC54","UXTLVC55","UXTLVC56","UXTLVC57","UXTLVC58","UXTLVC59","UXTLVC5A","UXTLVC5B","UXTLVC5C","UXTLVC5D","UXTLVC5E","UXTLVC5F",
        "UXTLVC60","UXTLVC61","UXTLVC62","UXTLVC63","UXTLVC64","UXTLVC65","UXTLVC66","UXTLVC67","UXTLVC68","UXTLVC69","UXTLVC6A","UXTLVC6B","UXTLVC6C","UXTLVC6D","UXTLVC6E","UXTLVC6F",
        "UXTLVC70","UXTLVC71","UXTLVC72","UXTLVC73","UXTLVC74","UXTLVC75","UXTLVC76","UXTLVC77","UXTLVC78","UXTLVC79","UXTLVC7A","UXTLVC7B","UXTLVC7C","UXTLVC7D","UXTLVC7E","UXTLVC7F",
        "UXTLVC80","UXTLVC81","UXTLVC82","UXTLVC83","UXTLVC84","UXTLVC85","UXTLVC86","UXTLVC87","UXTLVC88","UXTLVC89","UXTLVC8A","UXTLVC8B","UXTLVC8C","UXTLVC8D","UXTLVC8E","UXTLVC8F",
        "UXTLVC90","UXTLVC91","UXTLVC92","UXTLVC93","UXTLVC94","UXTLVC95","UXTLVC96","UXTLVC97","UXTLVC98","UXTLVC99","UXTLVC9A","UXTLVC9B","UXTLVC9C","UXTLVC9D","UXTLVC9E","UXTLVC9F",
        "UXTLVCA0","UXTLVCA1","UXTLVCA2","UXTLVCA3","UXTLVCA4","UXTLVCA5","UXTLVCA6","UXTLVCA7","UXTLVCA8","UXTLVCA9","UXTLVCAA","UXTLVCAB","UXTLVCAC","UXTLVCAD","UXTLVCAE","UXTLVCAF",
        "UXTLVCB0","UXTLVCB1","UXTLVCB2","UXTLVCB3","UXTLVCB4","UXTLVCB5","UXTLVCB6","UXTLVCB7","UXTLVCB8","UXTLVCB9","UXTLVCBA","UXTLVCBB","UXTLVCBC","UXTLVCBD","UXTLVCBE","UXTLVCBF",
        "UXTLVCC0","UXTLVCC1","UXTLVCC2","UXTLVCC3","UXTLVCC4","UXTLVCC5","UXTLVCC6","UXTLVCC7","UXTLVCC8","UXTLVCC9","UXTLVCCA","UXTLVCCB","UXTLVCCC","UXTLVCCD","UXTLVCCE","UXTLVCCF",
        "UXTLVCD0","UXTLVCD1","UXTLVCD2","UXTLVCD3","UXTLVCD4","UXTLVCD5","UXTLVCD6","UXTLVCD7","UXTLVCD8","UXTLVCD9","UXTLVCDA","UXTLVCDB","UXTLVCDC","UXTLVCDD","UXTLVCDE","UXTLVCDF",
        "UXTLVCE0","UXTLVCE1","UXTLVCE2","UXTLVCE3","UXTLVCE4","UXTLVCE5","UXTLVCE6","UXTLVCE7","UXTLVCE8","UXTLVCE9","UXTLVCEA","UXTLVCEB","UXTLVCEC","UXTLVCED","UXTLVCEE","UXTLVCEF",
        "UXTLVCF0","UXTLVCF1","UXTLVCF2","UXTLVCF3","UXTLVCF4","UXTLVCF5","UXTLVCF6","UXTLVCF7","UXTLVCF8","UXTLVCF9","UXTLVCFA","UXTLVCFB","UXTLVCFC","UXTLVCFD","UXTLVCFE","UXTLVCFF",
    },
    { // blue
        "UXTLVB00","UXTLVB01","UXTLVB02","UXTLVB03","UXTLVB04","UXTLVB05","UXTLVB06","UXTLVB07","UXTLVB08","UXTLVB09","UXTLVB0A","UXTLVB0B","UXTLVB0C","UXTLVB0D","UXTLVB0E","UXTLVB0F",
        "UXTLVB10","UXTLVB11","UXTLVB12","UXTLVB13","UXTLVB14","UXTLVB15","UXTLVB16","UXTLVB17","UXTLVB18","UXTLVB19","UXTLVB1A","UXTLVB1B","UXTLVB1C","UXTLVB1D","UXTLVB1E","UXTLVB1F",
        "UXTLVB20","UXTLVB21","UXTLVB22","UXTLVB23","UXTLVB24","UXTLVB25","UXTLVB26","UXTLVB27","UXTLVB28","UXTLVB29","UXTLVB2A","UXTLVB2B","UXTLVB2C","UXTLVB2D","UXTLVB2E","UXTLVB2F",
        "UXTLVB30","UXTLVB31","UXTLVB32","UXTLVB33","UXTLVB34","UXTLVB35","UXTLVB36","UXTLVB37","UXTLVB38","UXTLVB39","UXTLVB3A","UXTLVB3B","UXTLVB3C","UXTLVB3D","UXTLVB3E","UXTLVB3F",
        "UXTLVB40","UXTLVB41","UXTLVB42","UXTLVB43","UXTLVB44","UXTLVB45","UXTLVB46","UXTLVB47","UXTLVB48","UXTLVB49","UXTLVB4A","UXTLVB4B","UXTLVB4C","UXTLVB4D","UXTLVB4E","UXTLVB4F",
        "UXTLVB50","UXTLVB51","UXTLVB52","UXTLVB53","UXTLVB54","UXTLVB55","UXTLVB56","UXTLVB57","UXTLVB58","UXTLVB59","UXTLVB5A","UXTLVB5B","UXTLVB5C","UXTLVB5D","UXTLVB5E","UXTLVB5F",
        "UXTLVB60","UXTLVB61","UXTLVB62","UXTLVB63","UXTLVB64","UXTLVB65","UXTLVB66","UXTLVB67","UXTLVB68","UXTLVB69","UXTLVB6A","UXTLVB6B","UXTLVB6C","UXTLVB6D","UXTLVB6E","UXTLVB6F",
        "UXTLVB70","UXTLVB71","UXTLVB72","UXTLVB73","UXTLVB74","UXTLVB75","UXTLVB76","UXTLVB77","UXTLVB78","UXTLVB79","UXTLVB7A","UXTLVB7B","UXTLVB7C","UXTLVB7D","UXTLVB7E","UXTLVB7F",
        "UXTLVB80","UXTLVB81","UXTLVB82","UXTLVB83","UXTLVB84","UXTLVB85","UXTLVB86","UXTLVB87","UXTLVB88","UXTLVB89","UXTLVB8A","UXTLVB8B","UXTLVB8C","UXTLVB8D","UXTLVB8E","UXTLVB8F",
        "UXTLVB90","UXTLVB91","UXTLVB92","UXTLVB93","UXTLVB94","UXTLVB95","UXTLVB96","UXTLVB97","UXTLVB98","UXTLVB99","UXTLVB9A","UXTLVB9B","UXTLVB9C","UXTLVB9D","UXTLVB9E","UXTLVB9F",
        "UXTLVBA0","UXTLVBA1","UXTLVBA2","UXTLVBA3","UXTLVBA4","UXTLVBA5","UXTLVBA6","UXTLVBA7","UXTLVBA8","UXTLVBA9","UXTLVBAA","UXTLVBAB","UXTLVBAC","UXTLVBAD","UXTLVBAE","UXTLVBAF",
        "UXTLVBB0","UXTLVBB1","UXTLVBB2","UXTLVBB3","UXTLVBB4","UXTLVBB5","UXTLVBB6","UXTLVBB7","UXTLVBB8","UXTLVBB9","UXTLVBBA","UXTLVBBB","UXTLVBBC","UXTLVBBD","UXTLVBBE","UXTLVBBF",
        "UXTLVBC0","UXTLVBC1","UXTLVBC2","UXTLVBC3","UXTLVBC4","UXTLVBC5","UXTLVBC6","UXTLVBC7","UXTLVBC8","UXTLVBC9","UXTLVBCA","UXTLVBCB","UXTLVBCC","UXTLVBCD","UXTLVBCE","UXTLVBCF",
        "UXTLVBD0","UXTLVBD1","UXTLVBD2","UXTLVBD3","UXTLVBD4","UXTLVBD5","UXTLVBD6","UXTLVBD7","UXTLVBD8","UXTLVBD9","UXTLVBDA","UXTLVBDB","UXTLVBDC","UXTLVBDD","UXTLVBDE","UXTLVBDF",
        "UXTLVBE0","UXTLVBE1","UXTLVBE2","UXTLVBE3","UXTLVBE4","UXTLVBE5","UXTLVBE6","UXTLVBE7","UXTLVBE8","UXTLVBE9","UXTLVBEA","UXTLVBEB","UXTLVBEC","UXTLVBED","UXTLVBEE","UXTLVBEF",
        "UXTLVBF0","UXTLVBF1","UXTLVBF2","UXTLVBF3","UXTLVBF4","UXTLVBF5","UXTLVBF6","UXTLVBF7","UXTLVBF8","UXTLVBF9","UXTLVBFA","UXTLVBFB","UXTLVBFC","UXTLVBFD","UXTLVBFE","UXTLVBFF",
    },
};

// premature optimizations
str livesCounts[3][100] = {
    { // horizontal
        "00", "01", "02", "03", "04", "05", "06", "07", "08", "09",
        "10", "11", "12", "13", "14", "15", "16", "17", "18", "19",
        "20", "21", "22", "23", "24", "25", "26", "27", "28", "29",
        "30", "31", "32", "33", "34", "35", "36", "37", "38", "39",
        "40", "41", "42", "43", "44", "45", "46", "47", "48", "49",
        "50", "51", "52", "53", "54", "55", "56", "57", "58", "59",
        "60", "61", "62", "63", "64", "65", "66", "67", "68", "69",
        "70", "71", "72", "73", "74", "75", "76", "77", "78", "79",
        "80", "81", "82", "83", "84", "85", "86", "87", "88", "89",
        "90", "91", "92", "93", "94", "95", "96", "97", "98", "99",
    },
    { // vertical
        "0\n0", "0\n1", "0\n2", "0\n3", "0\n4", "0\n5", "0\n6", "0\n7", "0\n8", "0\n9",
        "1\n0", "1\n1", "1\n2", "1\n3", "1\n4", "1\n5", "1\n6", "1\n7", "1\n8", "1\n9",
        "2\n0", "2\n1", "2\n2", "2\n3", "2\n4", "2\n5", "2\n6", "2\n7", "2\n8", "2\n9",
        "3\n0", "3\n1", "3\n2", "3\n3", "3\n4", "3\n5", "3\n6", "3\n7", "3\n8", "3\n9",
        "4\n0", "4\n1", "4\n2", "4\n3", "4\n4", "4\n5", "4\n6", "4\n7", "4\n8", "4\n9",
        "5\n0", "5\n1", "5\n2", "5\n3", "5\n4", "5\n5", "5\n6", "5\n7", "5\n8", "5\n9",
        "6\n0", "6\n1", "6\n2", "6\n3", "6\n4", "6\n5", "6\n6", "6\n7", "6\n8", "6\n9",
        "7\n0", "7\n1", "7\n2", "7\n3", "7\n4", "7\n5", "7\n6", "7\n7", "7\n8", "7\n9",
        "8\n0", "8\n1", "8\n2", "8\n3", "8\n4", "8\n5", "8\n6", "8\n7", "8\n8", "8\n9",
        "9\n0", "9\n1", "9\n2", "9\n3", "9\n4", "9\n5", "9\n6", "9\n7", "9\n8", "9\n9",
    },
    { // verticalreverse
        "0\n0", "1\n0", "2\n0", "3\n0", "4\n0", "5\n0", "6\n0", "7\n0", "8\n0", "9\n0",
        "0\n1", "1\n1", "2\n1", "3\n1", "4\n1", "5\n1", "6\n1", "7\n1", "8\n1", "9\n1",
        "0\n2", "1\n2", "2\n2", "3\n2", "4\n2", "5\n2", "6\n2", "7\n2", "8\n2", "9\n2",
        "0\n3", "1\n3", "2\n3", "3\n3", "4\n3", "5\n3", "6\n3", "7\n3", "8\n3", "9\n3",
        "0\n4", "1\n4", "2\n4", "3\n4", "4\n4", "5\n4", "6\n4", "7\n4", "8\n4", "9\n4",
        "0\n5", "1\n5", "2\n5", "3\n5", "4\n5", "5\n5", "6\n5", "7\n5", "8\n5", "9\n5",
        "0\n6", "1\n6", "2\n6", "3\n6", "4\n6", "5\n6", "6\n6", "7\n6", "8\n6", "9\n6",
        "0\n7", "1\n7", "2\n7", "3\n7", "4\n7", "5\n7", "6\n7", "7\n7", "8\n7", "9\n7",
        "0\n8", "1\n8", "2\n8", "3\n8", "4\n8", "5\n8", "6\n8", "7\n8", "8\n8", "9\n8",
        "0\n9", "1\n9", "2\n9", "3\n9", "4\n9", "5\n9", "6\n9", "7\n9", "8\n9", "9\n9",
    },
};

function void drawLives(int pln, int x, int y)
{
    if(maxLives == -1)
        return;

    if(!cvShowLives)
        return;

    int lives = GetPlayerLivesLeft(pln);
    if(lives <= 0)
        return;

    if(
        livesCache_Scale != cvScale ||
        livesCache_Mirror != cvMirror ||
        livesCache_Dir != cvDir
    )
    {
        livesCache_Scale = cvScale;
        livesCache_Mirror = cvMirror;
        livesCache_Dir = cvDir;

        livesX = FixedMul(cvScale, (!cvDir ? (!cvMirror ? LIVES_X_00 : LIVES_X_01) : (!cvMirror ? LIVES_X_10 : LIVES_X_11)));
        livesY = FixedMul(cvScale, (!cvDir ? (!cvMirror ? LIVES_Y_00 : LIVES_Y_01) : (!cvMirror ? LIVES_Y_10 : LIVES_Y_11)));
        livesTextX = livesX + FixedMul(cvScale, (!cvDir ? (!cvMirror ? LIVES_TEXT_X_00 : LIVES_TEXT_X_01) : (!cvMirror ? LIVES_TEXT_X_10 : LIVES_TEXT_X_11)));
        livesTextY = livesY + FixedMul(cvScale, (!cvDir ? (!cvMirror ? LIVES_TEXT_Y_00 : LIVES_TEXT_Y_01) : (!cvMirror ? LIVES_TEXT_Y_10 : LIVES_TEXT_Y_11)));
        livesScale = cvScale;
        livesOffsX = FixedMul(cvScale, (!cvDir ? (!cvMirror ? -LIVES_OFFS : LIVES_OFFS) : 0));
        livesOffsY = FixedMul(cvScale, ( cvDir ? (!cvMirror ? -LIVES_OFFS : LIVES_OFFS) : 0));

        livesTextScale = FixedMul(cvScale, TEXT_SCALE);        
        livesTextHAlign = cvMirror && cvDir == horizontal ? ALIGN_RIGHT : ALIGN_LEFT;
        livesTextVAlign = !cvMirror && cvDir == vertical ? ALIGN_TOP : ALIGN_BOTTOM;

        livesOverflowX = livesX + (!cvDir ? (!cvMirror ? livesOffsX*2 : 0) : (!cvMirror ? 0 : 0));
        livesOverflowY = livesY + (!cvDir ? (!cvMirror ? livesOffsY*2 : 0) : (!cvMirror ? 0 : 0));
    }

    int team = GetPlayerInfo(pln, PLAYERINFO_TEAM);
    int cyan = ACS_NamedExecuteWithResult("core_getteampalette", team, 0);
    int blue = ACS_NamedExecuteWithResult("core_getteampalette", team, 1);
    
    displayIcon(livesIcons[0][cyan], getNewUIId(), x+livesOverflowX, y+livesOverflowY, livesScale, livesScale, cvAlpha);
    displayIcon(livesIcons[1][blue], getNewUIId(), x+livesOverflowX, y+livesOverflowY, livesScale, livesScale, cvAlpha);

    SetFont(uiFonts[cvFontIdx]);
    displayMessage(livesCounts[cvDir + cvReverseText][lives < 100 ? lives : 99], getNewUIId(), x + livesTextX, y + livesTextY, livesTextScale, livesTextScale, cvAlpha, livesTextHAlign, livesTextVAlign);
}

// Player name cache ================================================================================================================================
#define NAME_MAX 1000
#define CHAR_COLOR 28

int nameSize;
int nameBuilder[NAME_MAX];

int nameColorless[NAME_MAX];
int nameColors[NAME_MAX];
int colorPos[NAME_MAX][3];

function int getColorPos(int i) { return colorPos[i][0]; }
function int getColorStart(int i) { return colorPos[i][1]; }
function int getColorEnd(int i) { return colorPos[i][2]; }

function void setColorPos(int i, int val) { colorPos[i][0] = val; }
function void setColorStart(int i, int val) { colorPos[i][1] = val; }
function void setColorEnd(int i, int val) { colorPos[i][2] = val; }

// output of rebuildString stored here.
str cacheKey;
str cacheVert;
str cacheVertReverse;
int cacheWidth;
int cacheHeight;
int cacheHeightReverse;

function void rebuildString(str name) {
    cacheKey = name;

    strCpy(a:nameBuilder, name);
    nameSize = StrLen(name);

    str outName = "";

    int inColor = 0;
    int colorStart;

    int colorLessSize = 0;
    int colorsLength = 0;
    int colorsCount = 0;

    int i;

    int nameWidth = 0;

    for(i = 0; i < nameSize; i++) {
        switch(inColor) {
            case 0:
                if(nameBuilder[i] == CHAR_COLOR) {
                    inColor = 1;
                    setColorPos(colorsCount, colorLessSize);
                    setColorStart(colorsCount, colorsLength);
                } else {
                    nameColorless[colorLessSize++] = nameBuilder[i];
                    nameWidth += getCharWidth(nameBuilder[i]);
                }
                break;
            case 1: // check next char
                if(nameBuilder[i] == '[') {
                    colorStart = i;
                    inColor = 2;
                    setColorPos(colorsCount, colorLessSize);
                    setColorStart(colorsCount, colorsLength);
                    nameColors[colorsLength++] = nameBuilder[i];
                } else {
                    inColor = 0;
                    nameColors[colorsLength++] = nameBuilder[i];
                    setColorEnd(colorsCount, colorsLength);
                    colorsCount++;
                }
                break;
            case 2: // in big string
                nameColors[colorsLength++] = nameBuilder[i];
                if(nameBuilder[i] == ']') {
                    inColor = 0;
                    setColorEnd(colorsCount, colorsLength);
                    colorsCount++;
                }
                break;
        }
        nameBuilder[i] = 0;
    }

    // // Cache test
    // Log(s:"nameColorLess: ", a:(nameColorless, 0, colorLessSize));
    // Log(s:"nameColors: ", a:(nameColors, 0, colorsLength));

    // // Colors test
    // str tpos = StrParam(i:getColorPos(0));
    // str tstart = StrParam(i:getColorStart(0));
    // str tend = StrParam(i:getColorEnd(0));
    // for(i = 1; i < colorsCount; i++) {
    //     tpos = StrParam(s:tpos, s:", ", i:getColorPos(i));
    //     tstart = StrParam(s:tstart, s:", ", i:getColorStart(i));
    //     tend = StrParam(s:tend, s:", ", i:getColorEnd(i));
    // }
    // Log(s:tstart);
    // Log(s:tend);
    // Log(s:tpos);

    int c, nidx, curCol;

    // vertical
    nidx = 0;
    curCol = -1;
    for(i = 0; i < colorLessSize; i++) {
        if(colorsCount > 0) {
            if(i == getColorPos(curCol+1)) {
                curCol++;
            }
        }

        if(nameColorless[i] != ' ') {
            if(curCol > -1) {
                nameBuilder[nidx++] = CHAR_COLOR;
                for(c = getColorStart(curCol); c < getColorEnd(curCol); c++) {
                    nameBuilder[nidx++] = nameColors[c];
                }
            }
            nameBuilder[nidx++] = nameColorless[i];
        }

        nameBuilder[nidx++] = '\n';
    }

    cacheVert = StrParam(a:(nameBuilder, 0, nidx));
    
    // verticalreverse
    nidx = 0;
    curCol = colorsCount-1;
    for(i = colorLessSize; i > 0; i--) {
        if(i == getColorPos(curCol)) {
            curCol--;
            if(curCol < 0)
                curCol = colorsCount-1;
        }

        if(nameColorless[i-1] != ' ') {
            if(curCol > -1 && curCol < colorsCount) {
                // Log(s:"\\c");
                nameBuilder[nidx++] = CHAR_COLOR;
                for(c = getColorStart(curCol); c < getColorEnd(curCol); c++) {
                    // Log(c:nameColors[c]);
                    nameBuilder[nidx++] = nameColors[c];
                }
            }
            // Log(c:nameColorless[i-1]);
            nameBuilder[nidx++] = nameColorless[i-1];
        }

        nameBuilder[nidx++] = '\n';
    }

    cacheVertReverse = StrParam(a:(nameBuilder, 0, nidx));
    cacheWidth = nameWidth;
    cacheHeight = colorLessSize * 11;
    cacheHeightReverse = colorLessSize * 9;

    // Log(s:"===== Final Cache =====");
    // Log(s:"CacheKey: ", s:cacheKey);
    // Log(s:"CacheVert: ", s:cacheVert);
    // Log(s:"CacheVertReverse: ", s:cacheVertReverse);
    // Log(s:"CacheWidth: ", i:cacheWidth);
    // Log(s:"CacheHeight: ", i:cacheHeight);
    // Log(s:"CacheHeightReverse: ", i:cacheHeightReverse);
}

// bool init
// string name
// string vertical
// string reversevertical
// int width horizontal
// int width vertical
// int width vertical reverse
//
str namesCache[64][7];

function int isCacheInit(int plr) { return namesCache[plr][0]; }
function void setCacheInit(int plr, int val) { namesCache[plr][0] = val; }

function str getCacheName(int plr, int o, int r) { return namesCache[plr][1 + (o ? o + r : 0)]; }
function void setCacheName(int plr, int o, int r, str val) { namesCache[plr][1 + (o ? o + r : 0)] = val; }

function int getCacheNameWidth(int plr, int o, int r) { return namesCache[plr][5 + (o ? o + r : 0)]; }
function void setCacheNameWidth(int plr, int o, int r, int val) { namesCache[plr][5 + (o ? o + r : 0)] = val; }

function bool needsReset(int plr, str name)
{
    // [Russ] keeping in pattern with other uix stuff, short circuit the most important fail case
    if(!isCacheInit(plr)) {
        return true;
    }

    if(StrCmp(name, getCacheName(plr, 0, 0)) != 0) {
        return true;
    }

    return false;
}

function str getPlayerName(int plr, int o, int r)
{
    str name = StrParam(n:1+plr);

    if(needsReset(plr, name)) {
        rebuildString(name);

        setCacheInit(plr, true);
        setCacheName(plr, false, false, cacheKey);
        setCacheName(plr, true, false, cacheVert);
        setCacheName(plr, true, true, cacheVertReverse);
        setCacheNameWidth(plr, false, false, cacheWidth);
        setCacheNameWidth(plr, true, false, cacheHeight);
        setCacheNameWidth(plr, true, true, cacheHeightReverse);
    }

    return getCacheName(plr, o, r);
}

#define LOC_SIZE_LIMIT 1000
int LOC_SIZE = 0;

// Location name cache ==============================================================================================================================
// string location
// string vertical
// string reversevertical
// int width horizontal
// int width vertical
// int width vertical reverse
//
// Index size +1 to append an error state for the last slot
str locs[LOC_SIZE_LIMIT+1][7];

// previous locations so per-tic comparisons are reduced
// int loc
// int idx
//
int playerLocs[64][2];

// [Russ] This algorithm is based on one very dangerous assumption.
// Will the engine generate an identical string with a separate index in the string table?
// I feel like only god knows.
//
function int findLoc(int id) {
    for(int i = 0; i < LOC_SIZE; i++) {
        if(getLocId(i) == id)
            return i;
    }
    return -1;
}

function int getLocId(int idx) { return locs[idx][0]; }
function void setLocId(int idx, int val) { locs[idx][0] = val; }

function str getLocName(int idx, int o, int r) { return locs[idx][(o ? o + r : 0)]; }
function void setLocName(int idx, int o, int r, str val) { locs[idx][(o ? o + r : 0)] = val; }

function int getLocNameWidth(int idx, int o, int r) { return locs[idx][4 + (o ? o + r : 0)]; }
function void setLocNameWidth(int idx, int o, int r, int val) { locs[idx][4 + (o ? o + r : 0)] = val; }

function int getLocWidthPlr(int plr, int o, int r) { return getLocNameWidth(playerLocs[plr][1], o, r); }

function str findLocation(int plr, int o, int r) {
    str loc = GetActorSectorLocation(plr+PLN_TID_SHRT, false);

    if(StrLen(loc) == 0)
        return "";

    if(playerLocs[plr][0] == loc) {
        return getLocName(playerLocs[plr][1], o, r);
    }

    int idx = findLoc(loc);

    if(idx != -1) {
        playerLocs[plr][0] = loc;
        playerLocs[plr][1] = idx;
        return getLocName(idx, o, r);
    }

    if(LOC_SIZE > LOC_SIZE_LIMIT) {
        playerLocs[plr][0] = loc;
        playerLocs[plr][1] = LOC_SIZE_LIMIT;
        return getLocName(LOC_SIZE_LIMIT, o, r);
    }
    
    if(LOC_SIZE == LOC_SIZE_LIMIT) {
        loc = StrParam(l:StrParam(s:"UIX_UNKNOWN_LOC_", i:random(1, 4)));
    }

    rebuildString(loc);

    setLocName(LOC_SIZE, false, false, cacheKey);
    setLocName(LOC_SIZE, true, false, cacheVert);
    setLocName(LOC_SIZE, true, true, cacheVertReverse);
    setLocNameWidth(LOC_SIZE, false, false, cacheWidth);
    setLocNameWidth(LOC_SIZE, true, false, cacheHeight);
    setLocNameWidth(LOC_SIZE, true, true, cacheHeightReverse);

    playerLocs[plr][0] = loc;
    playerLocs[plr][1] = LOC_SIZE;

    // Log(s:"Loc change (new): ", i:playerLocs[plr][0], s:" ", i:playerLocs[plr][1]);

    return getLocName(LOC_SIZE++, o, r);
}

// Character width calculator =======================================================================================================================

int fontCharWidths[256] = {
    -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
};

function int getCharWidth(int char) {
    int idx = char + 128;
    if(fontCharWidths[idx] >= 0)
        return fontCharWidths[idx];

    int width = parseInt(StrParam(l:StrParam(s:"UI_SMALLFONT_", c:char<0?'N':'P', i:char)));
    fontCharWidths[idx] = width;
    return width;
}
