#library "UIXTEAM"

#include "zcommon.acs"

#include "SHRTFUNC.acs"

#include "UXTBNUM.acs"
#include "UXTBICNS.acs"

#define horizontal 0
#define vertical 1

int cvars[17];
#define CV_OFFSX        0
#define CV_OFFSY        1
#define CV_SCALE        2
#define CV_ALPHA        3
#define CV_NAMESIZE     4
#define CV_MIRROR       5
#define CV_DIR          6
#define CV_FONTDIR      7
#define CV_STACK        8
#define CV_SHOWNAME     9
#define CV_SHOWHEALTH   10
#define CV_SHOWLOCATION 11
#define CV_SHOWLIVES    12
#define CV_SHOWMUGSHOT  13
#define CV_FONTIDX      14
#define CV_REVERSETEXT  15
#define CV_SHOWWEAPON   16

int dbShowSelf;

int tiCache_Scale = MIN_INT;
int tiCache_Stack = MIN_INT;

#define STACK_OFFS 36
int tiStackOffs;

script "UITweaks_TeamInfo" (int cam, int cpn, int cv)
{
    if(!GetCvar("UIX_SV_TEAMINFO"))
        terminate;

    int baseAlpha = GetUserCvar(cpn, "UIX_CL_TEAMINFOALPHA");
    if(baseAlpha == 0.0)
        terminate;

    if(CheckActorInventory(cam, "UIX_NoTeamBar") > 0)
        terminate;

    SetActivator(cam);

    int pln = PlayerNumber();
    if(pln == -1)
        terminate;

    SetActivator(-1);

    int team = getPlayerTeam(pln);
    // Log(i:team, s:" cam: ", i:cam);

    if(team == 255) { // Spectator

    } else {
        dbShowSelf = GetUserCvar(cpn, "UIX_DEBUG_SHOWSELF");

        cvars[CV_OFFSX] = GetUserCvar(cpn, "UIX_CL_TEAMINFOOFFSX");
        cvars[CV_OFFSY] = GetUserCvar(cpn, "UIX_CL_TEAMINFOOFFSY");
        cvars[CV_SCALE] = GetUserCvar(cpn, "UIX_CL_TEAMINFOSCALE");
        cvars[CV_ALPHA] = baseAlpha;
        cvars[CV_NAMESIZE] = GetUserCvar(cpn, "UIX_CL_TEAMINFONAMESIZE");
        cvars[CV_MIRROR] = GetUserCvar(cpn, "UIX_CL_TEAMINFOMIRROR");
        cvars[CV_DIR] = GetUserCvar(cpn, "UIX_CL_TEAMINFODIR");
        cvars[CV_FONTDIR] = GetUserCvar(cpn, "UIX_CL_TEAMINFOFONTDIR");
        cvars[CV_STACK] = GetUserCvar(cpn, "UIX_CL_TEAMINFOSTACK");
        cvars[CV_SHOWNAME] = GetUserCvar(cpn, "UIX_CL_TEAMINFOSHOWNAME");
        cvars[CV_SHOWHEALTH] = GetUserCvar(cpn, "UIX_CL_TEAMINFOSHOWHEALTH");
        cvars[CV_SHOWLOCATION] = GetUserCvar(cpn, "UIX_CL_TEAMINFOSHOWLOCATION");
        cvars[CV_SHOWLIVES] = GetUserCvar(cpn, "UIX_CL_TEAMINFOSHOWLIVES");
        cvars[CV_SHOWMUGSHOT] = GetUserCvar(cpn, "UIX_CL_TEAMINFOSHOWMUGSHOT");
        cvars[CV_SHOWWEAPON] = GetUserCvar(cpn, "UIX_CL_TEAMINFOSHOWWEAPON");

        cvars[CV_FONTIDX] = cvars[CV_FONTDIR] ^ cvars[CV_DIR];
        cvars[CV_REVERSETEXT] = cvars[CV_DIR] && !cvars[CV_FONTDIR];

        if(tiCache_Scale != cvars[CV_SCALE] || tiCache_Stack != cvars[CV_STACK])
        {
            tiCache_Scale = cvars[CV_SCALE];
            tiCache_Stack = cvars[CV_STACK];

            if(cvars[CV_STACK]) {
                tiStackOffs = -1 * FixedMul(STACK_OFFS, cvars[CV_SCALE]);
            } else {
                tiStackOffs = FixedMul(STACK_OFFS, cvars[CV_SCALE]);
            }
        }

        int drawnPlayers = 0;

        for(int i = 0; i < MAX_PLAYERS_SHRT; i++) {
            // Log(i:i, s:" == ", i:pln);
            if(!dbShowSelf)
                if(i == pln)
                    continue;

            // Log(i:i, s:"in game? ", i:PlayerInGame(i));
            if(!PlayerInGame(i))
                continue;

            // Log(i:i, s:" team: ", i:GetPlayerInfo(i, PLAYERINFO_TEAM), s:" == ", i:team);
            if(getPlayerTeam(i) != team)
                continue;

            int baseX = cvars[CV_OFFSX] + (cvars[CV_DIR] ? drawnPlayers * tiStackOffs : 0);
            int baseY = cvars[CV_OFFSY] + (!cvars[CV_DIR] ? drawnPlayers * tiStackOffs : 0);

            drawMugshot(i, baseX, baseY);
            drawName(i, baseX, baseY);
            drawLocation(i, baseX, baseY);
            drawHealth(i, baseX, baseY);
            drawWeapon(i, baseX, baseY);
            drawLives(i, baseX, baseY);

            drawnPlayers++;
        }
    }
}

// Generic Draw constants ===========================================================================================================================
#define ROW_LENGTH 11
#define TEXT_SCALE 0.7

#define HP_LENGTH 64
#define HP_WIDTH 8

str uiFonts[2] = {
    "SMALLFNT",
    "SIDEFNTL",
};

// Draw mugshot =====================================================================================================================================
int mugCache_Scale = 0;
int mugScale;

function void drawMugshot(int pln, int x, int y)
{
    if(!cvars[CV_SHOWMUGSHOT])
        return;

    str face = getMugshotGraphicFromTID(pln+PLN_TID_SHRT);

    if(StrLen(face) == 0)
        return;

    if(mugCache_Scale != cvars[CV_SCALE]) {
        mugCache_Scale = cvars[CV_SCALE];
        mugScale = FixedMul(cvars[CV_SCALE], 4.0);
    }

    displayIcon(face, getNewUIId(), x, y, mugScale, mugScale, cvars[CV_ALPHA]);
}

// Mugshot data pull, from pingbutton
function str getMugshotGraphicFromTID(int tid) {
	str class = GetActorClass(tid);

	int u = UniqueTID();
	if(!SpawnForced(StrParam(s:"PBMug_", s:class), 0, 0, 0, u, 0)) {
		return "";
	}
	Thing_Remove(u);

	return ACS_NamedExecuteWithResult(StrParam(s:"PBMug_", s:class), tid);
}

// Draw Name ========================================================================================================================================
#define NAME_X_00 16 // -18
#define NAME_Y_00 -9

#define NAME_X_01 -19
#define NAME_Y_01 NAME_Y_00

#define NAME_X_10 -19
#define NAME_Y_10 17

#define NAME_X_11 NAME_X_10
#define NAME_Y_11 -18

int nc[4]; // name cache
#define NC_SCALE    0
#define NC_MIRROR   1
#define NC_DIR      2
#define NC_NAMESIZE 3

int nv[6]; // name vars
#define N_X      0
#define N_Y      1
#define N_SCALE  2
#define N_HALIGN 3
#define N_VALIGN 4
#define N_LENGTH 5

function void drawName(int pln, int x, int y)
{
    if(!cvars[CV_SHOWNAME])
        return;

    if(
        nc[NC_SCALE] != cvars[CV_SCALE] ||
        nc[NC_MIRROR] != cvars[CV_MIRROR] ||
        nc[NC_DIR] != cvars[CV_DIR] ||
        nc[NC_NAMESIZE] != cvars[CV_NAMESIZE]
    )
    {
        nc[NC_SCALE] = cvars[CV_SCALE];
        nc[NC_MIRROR] = cvars[CV_MIRROR];
        nc[NC_DIR] = cvars[CV_DIR];
        nc[NC_NAMESIZE] = cvars[CV_NAMESIZE];

        nv[N_X] = FixedMul(cvars[CV_SCALE], (!cvars[CV_DIR] ? (!cvars[CV_MIRROR] ? NAME_X_00 : NAME_X_01) : (!cvars[CV_MIRROR] ? NAME_X_10 : NAME_X_11)));
        nv[N_Y] = FixedMul(cvars[CV_SCALE], (!cvars[CV_DIR] ? (!cvars[CV_MIRROR] ? NAME_Y_00 : NAME_Y_01) : (!cvars[CV_MIRROR] ? NAME_Y_10 : NAME_Y_11)));
        nv[N_SCALE] = FixedMul(cvars[CV_SCALE], TEXT_SCALE);
        nv[N_LENGTH] = FixedDiv(cvars[CV_NAMESIZE], TEXT_SCALE);
        nv[N_HALIGN] = cvars[CV_MIRROR] && cvars[CV_DIR] == horizontal ? ALIGN_RIGHT : ALIGN_LEFT;
        nv[N_VALIGN] = !cvars[CV_MIRROR] && cvars[CV_DIR] == vertical ? ALIGN_TOP : ALIGN_BOTTOM;
    }

    str name = getPlayerName(pln, cvars[CV_DIR], cvars[CV_FONTIDX]);
    int plrNameLength = getCacheNameWidth(pln, cvars[CV_DIR], cvars[CV_FONTIDX]);
    int nameLengthScale = 1.0;

    if(plrNameLength > nv[N_LENGTH]) {
        nameLengthScale = FixedDiv(nv[N_LENGTH], plrNameLength);
    }

    int nameScaleX = cvars[CV_DIR] ? nv[N_SCALE] : FixedMul(nv[N_SCALE], nameLengthScale);
    int nameScaleY = !cvars[CV_DIR] ? nv[N_SCALE] : FixedMul(nv[N_SCALE], nameLengthScale);
    
    SetFont(uiFonts[cvars[CV_FONTIDX]]);
    displayMessage(name, getNewUIId(), x + nv[N_X], y + nv[N_Y], nameScaleX, nameScaleY, cvars[CV_ALPHA], nv[N_HALIGN], nv[N_VALIGN]);
}

// Draw Location ========================================================================================================================================
#define LOC_X_00 NAME_X_00
#define LOC_Y_00 NAME_Y_00 + 7

#define LOC_X_01 NAME_X_01
#define LOC_Y_01 LOC_Y_00

#define LOC_X_10 NAME_X_10 + 7
#define LOC_Y_10 NAME_Y_10

#define LOC_X_11 LOC_X_10
#define LOC_Y_11 NAME_Y_11

int lc[4]; // location cvar cache
#define LC_SCALE    0
#define LC_MIRROR   1
#define LC_DIR      2
#define LC_NAMESIZE 3

int lv[6]; // location variables
#define L_X      0
#define L_Y      1
#define L_SCALE  2
#define L_HALIGN 3
#define L_VALIGN 4
#define L_LENGTH 5

function void drawLocation(int pln, int x, int y)
{
    if(!cvars[CV_SHOWLOCATION])
        return;

    if(
        lv[LC_SCALE] != cvars[CV_SCALE] ||
        lv[LC_MIRROR] != cvars[CV_MIRROR] ||
        lv[LC_DIR] != cvars[CV_DIR] ||
        lv[LC_NAMESIZE] != cvars[CV_NAMESIZE]
    )
    {
        lv[LC_SCALE] = cvars[CV_SCALE];
        lv[LC_MIRROR] = cvars[CV_MIRROR];
        lv[LC_DIR] = cvars[CV_DIR];
        lv[LC_NAMESIZE] = cvars[CV_NAMESIZE];

        lv[L_X] = FixedMul(cvars[CV_SCALE], (!cvars[CV_DIR] ? (!cvars[CV_MIRROR] ? LOC_X_00 : LOC_X_01) : (!cvars[CV_MIRROR] ? LOC_X_10 : LOC_X_11)));
        lv[L_Y] = FixedMul(cvars[CV_SCALE], (!cvars[CV_DIR] ? (!cvars[CV_MIRROR] ? LOC_Y_00 : LOC_Y_01) : (!cvars[CV_MIRROR] ? LOC_Y_10 : LOC_Y_11)));
        lv[L_SCALE] = FixedMul(cvars[CV_SCALE], TEXT_SCALE);
        lv[L_LENGTH] = FixedDiv(cvars[CV_NAMESIZE], TEXT_SCALE);        
        lv[L_HALIGN] = cvars[CV_MIRROR] && cvars[CV_DIR] == horizontal ? ALIGN_RIGHT : ALIGN_LEFT;
        lv[L_VALIGN] = !cvars[CV_MIRROR] && cvars[CV_DIR] == vertical ? ALIGN_TOP : ALIGN_BOTTOM;
    }

    str loc = findLocation(pln, cvars[CV_DIR], cvars[CV_FONTIDX]);

    if(loc == -1)
        return;
    
    int plrLocLength = getLocWidthPlr(pln, cvars[CV_DIR], cvars[CV_FONTIDX]);

    int locLengthScale = 1.0;

    if(plrLocLength > lv[L_LENGTH]) {
        locLengthScale = FixedDiv(lv[L_LENGTH], plrLocLength);
    }

    int locScaleX = cvars[CV_DIR] ? lv[L_SCALE] : FixedMul(lv[L_SCALE], locLengthScale);
    int locScaleY = !cvars[CV_DIR] ? lv[L_SCALE] : FixedMul(lv[L_SCALE], locLengthScale);
    
    SetFont(uiFonts[cvars[CV_FONTIDX]]);
    displayMessage(loc, getNewUIId(), x + lv[L_X], y + lv[L_Y], locScaleX, locScaleY, cvars[CV_ALPHA], lv[L_HALIGN], lv[L_VALIGN]);
}

// Draw Health ======================================================================================================================================
#define HP_X_00 LOC_X_00 +104
#define HP_Y_00 LOC_Y_00 -28

#define HP_X_01 LOC_X_01 -764
#define HP_Y_01 HP_Y_00

#define HP_X_10 LOC_X_10-28
#define HP_Y_10 126

#define HP_X_11 HP_X_10
#define HP_Y_11 -774

#define HP_L_CONST HP_LENGTH * 10
#define HP_W_CONST HP_WIDTH * 10

int hc[3]; // health cvar cache
#define HC_SCALE  0
#define HC_MIRROR 1
#define HC_DIR    2

int hv[5]; // health variables
#define H_X      0
#define H_Y      1
#define H_SCALE  2
#define H_WIDTH  3
#define H_HEIGHT 4

int healthBarDimensions[2] = {HP_L_CONST, HP_W_CONST};

function void drawHealth(int pln, int x, int y)
{
    if(!cvars[CV_SHOWHEALTH])
        return;

    if(
        hc[HC_SCALE] != cvars[CV_SCALE] ||
        hc[HC_MIRROR] != cvars[CV_MIRROR] ||
        hc[HC_DIR] != cvars[CV_DIR]
    )
    {
        hc[HC_SCALE] = cvars[CV_SCALE];
        hc[HC_MIRROR] = cvars[CV_MIRROR];
        hc[HC_DIR] = cvars[CV_DIR];

        hv[H_SCALE] = FixedMul(FixedMul(cvars[CV_SCALE], 1.3334), 0.1);
        hv[H_X] = FixedMul(hv[H_SCALE], (!cvars[CV_DIR] ? (!cvars[CV_MIRROR] ? HP_X_00 : HP_X_01) : (!cvars[CV_MIRROR] ? HP_X_10 : HP_X_11)));
        hv[H_Y] = FixedMul(hv[H_SCALE], (!cvars[CV_DIR] ? (!cvars[CV_MIRROR] ? HP_Y_00 : HP_Y_01) : (!cvars[CV_MIRROR] ? HP_Y_10 : HP_Y_11)));
        hv[H_WIDTH] = healthBarDimensions[cvars[CV_DIR]];
        hv[H_HEIGHT] = healthBarDimensions[!cvars[CV_DIR]];
    }

    int mhp = GetActorProperty(pln+PLN_TID_SHRT, AProp_SpawnHealth);
    int chp = GetActorProperty(pln+PLN_TID_SHRT, AProp_Health);
    if(mhp == 0) // the bar flashing off looked weird but this prevents a /0 error.
        mhp = chp;
    
    drawBar(healthBars[0][cvars[CV_DIR]], healthBars[1][cvars[CV_DIR]], x+hv[H_X], y+hv[H_Y], hv[H_WIDTH], hv[H_HEIGHT], hv[H_SCALE], hv[H_SCALE], cvars[CV_ALPHA], chp, mhp, !cvars[CV_DIR]+1, false, getNewUIId(), getNewUIId());
}

// Draw Weapon ======================================================================================================================================
#define WEP_ICONX_00 20
#define WEP_ICONY_00 18

#define WEP_ICONX_01 -41
#define WEP_ICONY_01 WEP_ICONY_00

#define WEP_ICONX_10 12
#define WEP_ICONY_10 53

#define WEP_ICONX_11 WEP_ICONX_10
#define WEP_ICONY_11 -8

// Bar is relative to the icon
#define WEP_BARX_00 -1
#define WEP_BARY_00 -13

#define WEP_BARX_01 WEP_BARX_00
#define WEP_BARY_01 WEP_BARY_00

#define WEP_BARX_10 -8
#define WEP_BARY_10 -40

#define WEP_BARX_11 WEP_BARX_10
#define WEP_BARY_11 WEP_BARY_10

// Double bar has a different set of coords
#define WEP_BAR1X_00 -1
#define WEP_BAR1Y_00 -8

#define WEP_BAR1X_01 WEP_BAR1X_00
#define WEP_BAR1Y_01 WEP_BAR1Y_00

#define WEP_BAR1X_10 -4
#define WEP_BAR1Y_10 -40

#define WEP_BAR1X_11 WEP_BAR1X_10
#define WEP_BAR1Y_11 WEP_BAR1Y_10

#define WEP_BAR2X_00 -1
#define WEP_BAR2Y_00 -12

#define WEP_BAR2X_01 WEP_BAR2X_00
#define WEP_BAR2Y_01 WEP_BAR2Y_00

#define WEP_BAR2X_10 -8
#define WEP_BAR2Y_10 -40

#define WEP_BAR2X_11 WEP_BAR2X_10
#define WEP_BAR2Y_11 WEP_BAR2Y_10


#define WEP_L_CONST 28 * 10
#define WEP_W_CONST 4 * 10

#define WEP_ICON_SCALE 0.5

int wc[3]; // weapon cvar cache
#define WC_SCALE  0
#define WC_MIRROR 1
#define WC_DIR    2

int wv[19]; // weapon variables
#define W_ICONX           0
#define W_ICONY           1
#define W_BARX            2
#define W_BARY            3
#define W_BAR1X           4
#define W_BAR1Y           5
#define W_BAR2X           6
#define W_BAR2Y           7
#define W_ICONSCALE       8
#define W_BARSCALE        9
#define W_BARWIDTH        10
#define W_BARHEIGHT       11
#define W_BARSINGLEWIDTH  12
#define W_BARSINGLEHEIGHT 13
#define W_BAR1TOP         14
#define W_BAR1BOTTOM      15
#define W_BAR2TOP         16
#define W_BAR2BOTTOM      17
#define W_SCALE           18

int weaponBarDimensions[2] = {WEP_L_CONST, WEP_W_CONST};

#define UIX_WeapProp_Actor 0
#define UIX_WeapProp_Tag 1
#define UIX_WeapProp_Icon 2
#define UIX_WeapProp_Ammo 3
#define UIX_WeapProp_Ammo2 4

#define UIX_WeapProp_Slot 5
#define UIX_WeapProp_Cyan 6
#define UIX_WeapProp_Blue 7
#define UIX_WeapProp_Cyan2 8
#define UIX_WeapProp_Blue2 9

function void drawWeapon(int pln, int x, int y)
{
    if(!cvars[CV_SHOWWEAPON])
        return;

    // int mwep = GetActorProperty(pln+PLN_TID_SHRT, AProp_SpawnWeapon);
    // if(mwep == 0)
        // return;

    if(
        wc[WC_SCALE] != cvars[CV_SCALE] ||
        wc[WC_MIRROR] != cvars[CV_MIRROR] ||
        wc[WC_DIR] != cvars[CV_DIR]
    )
    {
        wc[WC_SCALE] = cvars[CV_SCALE];
        wc[WC_MIRROR] = cvars[CV_MIRROR];
        wc[WC_DIR] = cvars[CV_DIR];

        wv[W_SCALE] = FixedMul(cvars[CV_SCALE], 1.3334);

        wv[W_ICONX] = FixedMul(wv[W_SCALE], (!cvars[CV_DIR] ? (!cvars[CV_MIRROR] ? WEP_ICONX_00 : WEP_ICONX_01) : (!cvars[CV_MIRROR] ? WEP_ICONX_10 : WEP_ICONX_11)));
        wv[W_ICONY] = FixedMul(wv[W_SCALE], (!cvars[CV_DIR] ? (!cvars[CV_MIRROR] ? WEP_ICONY_00 : WEP_ICONY_01) : (!cvars[CV_MIRROR] ? WEP_ICONY_10 : WEP_ICONY_11)));
        wv[W_BARX] = wv[W_ICONX] + FixedMul(wv[W_SCALE], (!cvars[CV_DIR] ? (!cvars[CV_MIRROR] ? WEP_BARX_00 : WEP_BARX_01) : (!cvars[CV_MIRROR] ? WEP_BARX_10 : WEP_BARX_11)));
        wv[W_BARY] = wv[W_ICONY] + FixedMul(wv[W_SCALE], (!cvars[CV_DIR] ? (!cvars[CV_MIRROR] ? WEP_BARY_00 : WEP_BARY_01) : (!cvars[CV_MIRROR] ? WEP_BARY_10 : WEP_BARY_11)));
        wv[W_BAR1X] = wv[W_ICONX] + FixedMul(wv[W_SCALE], (!cvars[CV_DIR] ? (!cvars[CV_MIRROR] ? WEP_BAR1X_00 : WEP_BAR1X_01) : (!cvars[CV_MIRROR] ? WEP_BAR1X_10 : WEP_BAR1X_11)));
        wv[W_BAR1Y] = wv[W_ICONY] + FixedMul(wv[W_SCALE], (!cvars[CV_DIR] ? (!cvars[CV_MIRROR] ? WEP_BAR1Y_00 : WEP_BAR1Y_01) : (!cvars[CV_MIRROR] ? WEP_BAR1Y_10 : WEP_BAR1Y_11)));
        wv[W_BAR2X] = wv[W_ICONX] + FixedMul(wv[W_SCALE], (!cvars[CV_DIR] ? (!cvars[CV_MIRROR] ? WEP_BAR2X_00 : WEP_BAR2X_01) : (!cvars[CV_MIRROR] ? WEP_BAR2X_10 : WEP_BAR2X_11)));
        wv[W_BAR2Y] = wv[W_ICONY] + FixedMul(wv[W_SCALE], (!cvars[CV_DIR] ? (!cvars[CV_MIRROR] ? WEP_BAR2Y_00 : WEP_BAR2Y_01) : (!cvars[CV_MIRROR] ? WEP_BAR2Y_10 : WEP_BAR2Y_11)));
        wv[W_BARSCALE] = FixedMul(FixedMul(wv[W_SCALE], 1.0), 0.1);
        wv[W_ICONSCALE] = FixedMul(WEP_ICON_SCALE, wv[W_SCALE]);
        wv[W_BARWIDTH] = weaponBarDimensions[cvars[CV_DIR]];
        wv[W_BARHEIGHT] = weaponBarDimensions[!cvars[CV_DIR]];

        wv[W_BARSINGLEWIDTH] = wv[W_BARWIDTH];
        wv[W_BARSINGLEHEIGHT] = wv[W_BARHEIGHT];

        if(cvars[CV_DIR]) {
            wv[W_BARSINGLEWIDTH] *= 2;
        } else {
            wv[W_BARSINGLEHEIGHT] *= 2;
        }
    }

    str icon = ACS_NamedExecuteWithResult("UIXDB_GetPlayerWeaponProperty", pln, UIX_WeapProp_Icon);

    int amt1 = ACS_NamedExecuteWithResult("UIXDB_GetPlayerAmmo", pln, 0, 0);

    if(amt1 != -1) {
        int amx1 = ACS_NamedExecuteWithResult("UIXDB_GetPlayerAmmo", pln, 0, 1);

        str cyan, blue, black;

        int amt2 = ACS_NamedExecuteWithResult("UIXDB_GetPlayerAmmo", pln, 1, 0);

        if(amt2 != -1) {
            cyan = ACS_NamedExecuteWithResult("UIXDB_GetAmmoBar", 2+cvars[CV_DIR], 0, ACS_NamedExecuteWithResult("UIXDB_GetPlayerWeaponProperty", pln, UIX_WeapProp_Cyan));
            blue = ACS_NamedExecuteWithResult("UIXDB_GetAmmoBar", 2+cvars[CV_DIR], 1, ACS_NamedExecuteWithResult("UIXDB_GetPlayerWeaponProperty", pln, UIX_WeapProp_Blue));
            black = ACS_NamedExecuteWithResult("UIXDB_GetAmmoBar", 2+cvars[CV_DIR], 2);

            int amx2 = ACS_NamedExecuteWithResult("UIXDB_GetPlayerAmmo", pln, 1, 1);
            str cyan2 = ACS_NamedExecuteWithResult("UIXDB_GetAmmoBar", 2+cvars[CV_DIR], 0, ACS_NamedExecuteWithResult("UIXDB_GetPlayerWeaponProperty", pln, UIX_WeapProp_Cyan2));
            str blue2 = ACS_NamedExecuteWithResult("UIXDB_GetAmmoBar", 2+cvars[CV_DIR], 1, ACS_NamedExecuteWithResult("UIXDB_GetPlayerWeaponProperty", pln, UIX_WeapProp_Blue2));

            drawLayeredBar(cyan, blue, black, X+wv[W_BAR1X], Y+wv[W_BAR1Y], wv[W_BARWIDTH], wv[W_BARHEIGHT], wv[W_BARSCALE], wv[W_BARSCALE], cvars[CV_ALPHA], amt1, amx1, !cvars[CV_DIR]+1, false, getNewUIId(), getNewUIId(), getNewUIId());
            drawLayeredBar(cyan2, blue2, black, X+wv[W_BAR2X], Y+wv[W_BAR2Y], wv[W_BARWIDTH], wv[W_BARHEIGHT], wv[W_BARSCALE], wv[W_BARSCALE], cvars[CV_ALPHA], amt2, amx2, !cvars[CV_DIR]+1, false, getNewUIId(), getNewUIId(), getNewUIId());
        } else {
            cyan = ACS_NamedExecuteWithResult("UIXDB_GetAmmoBar", 4+cvars[CV_DIR], 0, ACS_NamedExecuteWithResult("UIXDB_GetPlayerWeaponProperty", pln, UIX_WeapProp_Cyan));
            blue = ACS_NamedExecuteWithResult("UIXDB_GetAmmoBar", 4+cvars[CV_DIR], 1, ACS_NamedExecuteWithResult("UIXDB_GetPlayerWeaponProperty", pln, UIX_WeapProp_Blue));
            black = ACS_NamedExecuteWithResult("UIXDB_GetAmmoBar", 4+cvars[CV_DIR], 2);
            drawLayeredBar(cyan, blue, black, X+wv[W_BARX], Y+wv[W_BARY], wv[W_BARSINGLEWIDTH], wv[W_BARSINGLEHEIGHT], wv[W_BARSCALE], wv[W_BARSCALE], cvars[CV_ALPHA], amt1, amx1, !cvars[CV_DIR]+1, false, getNewUIId(), getNewUIId(), getNewUIId());
        }
    }

    displayIcon(icon, getNewUIId(), x+wv[W_ICONX], y+wv[W_ICONY], wv[W_ICONSCALE], wv[W_ICONSCALE], cvars[CV_ALPHA]);
}

// Draw Lives =======================================================================================================================================
#define LIVES_X_00 105
#define LIVES_Y_00 16

#define LIVES_X_01 -96
#define LIVES_Y_01 LIVES_Y_00

#define LIVES_X_10 13
#define LIVES_Y_10 86

#define LIVES_X_11 LIVES_X_10
#define LIVES_Y_11 -80

#define LIVES_TEXT_X_00 -16
#define LIVES_TEXT_Y_00 0

#define LIVES_TEXT_X_01 8
#define LIVES_TEXT_Y_01 0

#define LIVES_TEXT_X_10 -7
#define LIVES_TEXT_Y_10 1

#define LIVES_TEXT_X_11 -7
#define LIVES_TEXT_Y_11 -10

#define LIVES_OFFS 9

int sc[3]; // lives cvar cache
#define SC_SCALE  0
#define SC_MIRROR 1
#define SC_DIR    2

int sv[12]; // lives variables
#define S_X          0
#define S_Y          1
#define S_TEXTX      2
#define S_TEXTY      3
#define S_SCALE      4
#define S_OFFSX      5
#define S_OFFSY      6
#define S_TEXTSCALE  7
#define S_TEXTHALIGN 8
#define S_TEXTVALIGN 9
#define S_OVERFLOWX  10
#define S_OVERFLOWY  11

int maxLives = -1;

script "UITweaks_TeamInfo_MaxLives" OPEN CLIENTSIDE
{
    if(GetCvar("lastmanstanding") || GetCvar("teamlms")) {
        maxLives = GetCvar("sv_maxlives");
    }
}

function void drawLives(int pln, int x, int y)
{
    if(maxLives == -1)
        return;

    if(!cvars[CV_SHOWLIVES])
        return;

    int lives = GetPlayerLivesLeft(pln);
    if(lives <= 0)
        return;

    if(
        sc[SC_SCALE] != cvars[CV_SCALE] ||
        sc[SC_MIRROR] != cvars[CV_MIRROR] ||
        sc[SC_DIR] != cvars[CV_DIR]
    )
    {
        sc[SC_SCALE] = cvars[CV_SCALE];
        sc[SC_MIRROR] = cvars[CV_MIRROR];
        sc[SC_DIR] = cvars[CV_DIR];

        sv[S_X] = FixedMul(cvars[CV_SCALE], (!cvars[CV_DIR] ? (!cvars[CV_MIRROR] ? LIVES_X_00 : LIVES_X_01) : (!cvars[CV_MIRROR] ? LIVES_X_10 : LIVES_X_11)));
        sv[S_Y] = FixedMul(cvars[CV_SCALE], (!cvars[CV_DIR] ? (!cvars[CV_MIRROR] ? LIVES_Y_00 : LIVES_Y_01) : (!cvars[CV_MIRROR] ? LIVES_Y_10 : LIVES_Y_11)));
        sv[S_TEXTX] = sv[S_X] + FixedMul(cvars[CV_SCALE], (!cvars[CV_DIR] ? (!cvars[CV_MIRROR] ? LIVES_TEXT_X_00 : LIVES_TEXT_X_01) : (!cvars[CV_MIRROR] ? LIVES_TEXT_X_10 : LIVES_TEXT_X_11)));
        sv[S_TEXTY] = sv[S_Y] + FixedMul(cvars[CV_SCALE], (!cvars[CV_DIR] ? (!cvars[CV_MIRROR] ? LIVES_TEXT_Y_00 : LIVES_TEXT_Y_01) : (!cvars[CV_MIRROR] ? LIVES_TEXT_Y_10 : LIVES_TEXT_Y_11)));
        sv[S_SCALE] = cvars[CV_SCALE];
        sv[S_OFFSX] = FixedMul(cvars[CV_SCALE], (!cvars[CV_DIR] ? (!cvars[CV_MIRROR] ? -LIVES_OFFS : LIVES_OFFS) : 0));
        sv[S_OFFSY] = FixedMul(cvars[CV_SCALE], ( cvars[CV_DIR] ? (!cvars[CV_MIRROR] ? -LIVES_OFFS : LIVES_OFFS) : 0));

        sv[S_TEXTSCALE] = FixedMul(cvars[CV_SCALE], TEXT_SCALE);        
        sv[S_TEXTHALIGN] = cvars[CV_MIRROR] && cvars[CV_DIR] == horizontal ? ALIGN_RIGHT : ALIGN_LEFT;
        sv[S_TEXTVALIGN] = !cvars[CV_MIRROR] && cvars[CV_DIR] == vertical ? ALIGN_TOP : ALIGN_BOTTOM;

        sv[S_OVERFLOWX] = sv[S_X] + (!cvars[CV_DIR] ? (!cvars[CV_MIRROR] ? sv[S_OFFSX]*2 : 0) : (!cvars[CV_MIRROR] ? 0 : 0));
        sv[S_OVERFLOWY] = sv[S_Y] + (!cvars[CV_DIR] ? (!cvars[CV_MIRROR] ? sv[S_OFFSY]*2 : 0) : (!cvars[CV_MIRROR] ? 0 : 0));
    }

    int team = GetPlayerInfo(pln, PLAYERINFO_TEAM);
    int cyan = ACS_NamedExecuteWithResult("core_getteampalette", team, 0);
    int blue = ACS_NamedExecuteWithResult("core_getteampalette", team, 1);
    
    displayIcon(livesIcons[0][cyan], getNewUIId(), x+sv[S_OVERFLOWX], y+sv[S_OVERFLOWY], sv[S_SCALE], sv[S_SCALE], cvars[CV_ALPHA]);
    displayIcon(livesIcons[1][blue], getNewUIId(), x+sv[S_OVERFLOWX], y+sv[S_OVERFLOWY], sv[S_SCALE], sv[S_SCALE], cvars[CV_ALPHA]);

    SetFont(uiFonts[cvars[CV_FONTIDX]]);
    displayMessage(livesCounts[cvars[CV_DIR] + cvars[CV_REVERSETEXT]][lives < 100 ? lives : 99], getNewUIId(), x + sv[S_TEXTX], y + sv[S_TEXTY], sv[S_TEXTSCALE], sv[S_TEXTSCALE], cvars[CV_ALPHA], sv[S_TEXTHALIGN], sv[S_TEXTVALIGN]);
}

// Player name cache ================================================================================================================================
#define NAME_MAX 1000
#define CHAR_COLOR 28

int nameSize;
int nameBuilder[NAME_MAX];

int nameColorless[NAME_MAX];
int nameColors[NAME_MAX];
int colorPos[NAME_MAX][3];

function int getColorPos(int i) { return colorPos[i][0]; }
function int getColorStart(int i) { return colorPos[i][1]; }
function int getColorEnd(int i) { return colorPos[i][2]; }

function void setColorPos(int i, int val) { colorPos[i][0] = val; }
function void setColorStart(int i, int val) { colorPos[i][1] = val; }
function void setColorEnd(int i, int val) { colorPos[i][2] = val; }

// output of rebuildString stored here.
str cacheKey;
str cacheVert;
str cacheVertReverse;
int cacheWidth;
int cacheHeight;
int cacheHeightReverse;

function void rebuildString(str name) {
    cacheKey = name;

    strCpy(a:nameBuilder, name);
    nameSize = StrLen(name);

    str outName = "";

    int inColor = 0;
    int colorStart;

    int colorLessSize = 0;
    int colorsLength = 0;
    int colorsCount = 0;

    int i;

    int nameWidth = 0;

    for(i = 0; i < nameSize; i++) {
        switch(inColor) {
            case 0:
                if(nameBuilder[i] == CHAR_COLOR) {
                    inColor = 1;
                    setColorPos(colorsCount, colorLessSize);
                    setColorStart(colorsCount, colorsLength);
                } else {
                    nameColorless[colorLessSize++] = nameBuilder[i];
                    nameWidth += getCharWidth(nameBuilder[i]);
                }
                break;
            case 1: // check next char
                if(nameBuilder[i] == '[') {
                    colorStart = i;
                    inColor = 2;
                    setColorPos(colorsCount, colorLessSize);
                    setColorStart(colorsCount, colorsLength);
                    nameColors[colorsLength++] = nameBuilder[i];
                } else {
                    inColor = 0;
                    nameColors[colorsLength++] = nameBuilder[i];
                    setColorEnd(colorsCount, colorsLength);
                    colorsCount++;
                }
                break;
            case 2: // in big string
                nameColors[colorsLength++] = nameBuilder[i];
                if(nameBuilder[i] == ']') {
                    inColor = 0;
                    setColorEnd(colorsCount, colorsLength);
                    colorsCount++;
                }
                break;
        }
        nameBuilder[i] = 0;
    }

    // // Cache test
    // Log(s:"nameColorLess: ", a:(nameColorless, 0, colorLessSize));
    // Log(s:"nameColors: ", a:(nameColors, 0, colorsLength));

    // // Colors test
    // str tpos = StrParam(i:getColorPos(0));
    // str tstart = StrParam(i:getColorStart(0));
    // str tend = StrParam(i:getColorEnd(0));
    // for(i = 1; i < colorsCount; i++) {
    //     tpos = StrParam(s:tpos, s:", ", i:getColorPos(i));
    //     tstart = StrParam(s:tstart, s:", ", i:getColorStart(i));
    //     tend = StrParam(s:tend, s:", ", i:getColorEnd(i));
    // }
    // Log(s:tstart);
    // Log(s:tend);
    // Log(s:tpos);

    int c, nidx, curCol;

    // vertical
    nidx = 0;
    curCol = -1;
    for(i = 0; i < colorLessSize; i++) {
        if(colorsCount > 0) {
            if(i == getColorPos(curCol+1)) {
                curCol++;
            }
        }

        if(nameColorless[i] != ' ') {
            if(curCol > -1) {
                nameBuilder[nidx++] = CHAR_COLOR;
                for(c = getColorStart(curCol); c < getColorEnd(curCol); c++) {
                    nameBuilder[nidx++] = nameColors[c];
                }
            }
            nameBuilder[nidx++] = nameColorless[i];
        }

        nameBuilder[nidx++] = '\n';
    }

    cacheVert = StrParam(a:(nameBuilder, 0, nidx));
    
    // verticalreverse
    nidx = 0;
    curCol = colorsCount-1;
    for(i = colorLessSize; i > 0; i--) {
        if(i == getColorPos(curCol)) {
            curCol--;
            if(curCol < 0)
                curCol = colorsCount-1;
        }

        if(nameColorless[i-1] != ' ') {
            if(curCol > -1 && curCol < colorsCount) {
                // Log(s:"\\c");
                nameBuilder[nidx++] = CHAR_COLOR;
                for(c = getColorStart(curCol); c < getColorEnd(curCol); c++) {
                    // Log(c:nameColors[c]);
                    nameBuilder[nidx++] = nameColors[c];
                }
            }
            // Log(c:nameColorless[i-1]);
            nameBuilder[nidx++] = nameColorless[i-1];
        }

        nameBuilder[nidx++] = '\n';
    }

    cacheVertReverse = StrParam(a:(nameBuilder, 0, nidx));
    cacheWidth = nameWidth;
    cacheHeight = colorLessSize * 11;
    cacheHeightReverse = colorLessSize * 9;

    // Log(s:"===== Final Cache =====");
    // Log(s:"CacheKey: ", s:cacheKey);
    // Log(s:"CacheVert: ", s:cacheVert);
    // Log(s:"CacheVertReverse: ", s:cacheVertReverse);
    // Log(s:"CacheWidth: ", i:cacheWidth);
    // Log(s:"CacheHeight: ", i:cacheHeight);
    // Log(s:"CacheHeightReverse: ", i:cacheHeightReverse);
}

// bool init
// string name
// string vertical
// string reversevertical
// int width horizontal
// int width vertical
// int width vertical reverse
//
str namesCache[MAX_PLAYERS_SHRT][7];

function int isCacheInit(int plr) { return namesCache[plr][0]; }
function void setCacheInit(int plr, int val) { namesCache[plr][0] = val; }

function str getCacheName(int plr, int o, int r) { return namesCache[plr][1 + (o ? o + r : 0)]; }
function void setCacheName(int plr, int o, int r, str val) { namesCache[plr][1 + (o ? o + r : 0)] = val; }

function int getCacheNameWidth(int plr, int o, int r) { return namesCache[plr][5 + (o ? o + r : 0)]; }
function void setCacheNameWidth(int plr, int o, int r, int val) { namesCache[plr][5 + (o ? o + r : 0)] = val; }

function bool needsReset(int plr, str name)
{
    // [Russ] keeping in pattern with other uix stuff, short circuit the most important fail case
    if(!isCacheInit(plr)) {
        return true;
    }

    if(StrCmp(name, getCacheName(plr, 0, 0)) != 0) {
        return true;
    }

    return false;
}

function str getPlayerName(int plr, int o, int r)
{
    str name = StrParam(n:1+plr);

    if(needsReset(plr, name)) {
        rebuildString(name);

        setCacheInit(plr, true);
        setCacheName(plr, false, false, cacheKey);
        setCacheName(plr, true, false, cacheVert);
        setCacheName(plr, true, true, cacheVertReverse);
        setCacheNameWidth(plr, false, false, cacheWidth);
        setCacheNameWidth(plr, true, false, cacheHeight);
        setCacheNameWidth(plr, true, true, cacheHeightReverse);
    }

    return getCacheName(plr, o, r);
}

#define LOC_SIZE_LIMIT 1000
int LOC_SIZE = 0;

// Location name cache ==============================================================================================================================
// string location
// string vertical
// string reversevertical
// int width horizontal
// int width vertical
// int width vertical reverse
//
// Index size +1 to append an error state for the last slot
str locs[LOC_SIZE_LIMIT+1][7];

// previous locations so per-tic comparisons are reduced
// int loc
// int idx
//
int playerLocs[MAX_PLAYERS_SHRT][2];

// [Russ] This algorithm is based on one very dangerous assumption.
// Will the engine generate an identical string with a separate index in the string table?
// I feel like only god knows.
// EDIT: NOPE.
// IT SOMETIMES RETURNS A NEW INDEX.
// I DON'T KNOW WHEN I DON'T KNOW HOW I JUST KNOW IT DOES.
//
function int findLoc(int id) {
    for(int i = 0; i < LOC_SIZE; i++) {
        if(StrCmp(getLocId(i), id) == 0)
            return i;
    }
    return -1;
}

function int getLocId(int idx) { return locs[idx][0]; }
function void setLocId(int idx, int val) { locs[idx][0] = val; }

function str getLocName(int idx, int o, int r) { return locs[idx][(o ? o + r : 0)]; }
function void setLocName(int idx, int o, int r, str val) { locs[idx][(o ? o + r : 0)] = val; }

function int getLocNameWidth(int idx, int o, int r) { return locs[idx][4 + (o ? o + r : 0)]; }
function void setLocNameWidth(int idx, int o, int r, int val) { locs[idx][4 + (o ? o + r : 0)] = val; }

function int getLocWidthPlr(int plr, int o, int r) { return getLocNameWidth(playerLocs[plr][1], o, r); }

function str findLocation(int plr, int o, int r) {
    str loc = GetActorSectorLocation(plr+PLN_TID_SHRT, false);

    if(StrLen(loc) == 0)
        return "";

    if(StrCmp(playerLocs[plr][0], loc) == 0) {
        return getLocName(playerLocs[plr][1], o, r);
    }

    int idx = findLoc(loc);

    if(idx != -1) {
        playerLocs[plr][0] = loc;
        playerLocs[plr][1] = idx;
        return getLocName(idx, o, r);
    }

    if(LOC_SIZE > LOC_SIZE_LIMIT) {
        playerLocs[plr][0] = loc;
        playerLocs[plr][1] = LOC_SIZE_LIMIT;
        return getLocName(LOC_SIZE_LIMIT, o, r);
    }
    
    if(LOC_SIZE == LOC_SIZE_LIMIT) {
        loc = StrParam(l:StrParam(s:"UIX_UNKNOWN_LOC_", i:random(1, 4)));
    }

    rebuildString(loc);

    setLocName(LOC_SIZE, false, false, cacheKey);
    setLocName(LOC_SIZE, true, false, cacheVert);
    setLocName(LOC_SIZE, true, true, cacheVertReverse);
    setLocNameWidth(LOC_SIZE, false, false, cacheWidth);
    setLocNameWidth(LOC_SIZE, true, false, cacheHeight);
    setLocNameWidth(LOC_SIZE, true, true, cacheHeightReverse);

    playerLocs[plr][0] = loc;
    playerLocs[plr][1] = LOC_SIZE;

    // Log(s:"Loc change (new): ", i:playerLocs[plr][0], s:" ", i:playerLocs[plr][1]);

    return getLocName(LOC_SIZE++, o, r);
}

// Character width calculator =======================================================================================================================

int fontCharWidths[256] = {
    -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
};

function int getCharWidth(int char) {
    int idx = char + 128;
    if(fontCharWidths[idx] >= 0)
        return fontCharWidths[idx];

    int width = parseInt(StrParam(l:StrParam(s:"UI_SMALLFONT_", c:char<0?'N':'P', i:char)));
    fontCharWidths[idx] = width;
    return width;
}
