#library "UIXTEAM"

#include "zcommon.acs"

#import "8BDT.acs"

#include "SHRTFUNC.acs"

#define TEAMINFO_ID_OFFS    10000
#define TEAMINFO_ID_NAME    0100
#define TEAMINFO_ID_HP1     0200
#define TEAMINFO_ID_HP2     0300
#define TEAMINFO_ID_HP3     0400
#define TEAMINFO_ID_WEI     0500
#define TEAMINFO_ID_WE1     0600
#define TEAMINFO_ID_WE2     0700
#define TEAMINFO_ID_LOC     0800
#define TEAMINFO_ID_ARR1    0900
#define TEAMINFO_ID_ARR2    1000
#define TEAMINFO_ID_ARR3    1100
#define TEAMINFO_ID_ARR4    1200
#define TEAMINFO_ID_ARR5    1300
#define TEAMINFO_ID_ARR6    1400
#define TEAMINFO_ID_MUG     1500

#define TEAMINFO_BAR_FONT 0
#define TEAMINFO_BAR_START 2
#define TEAMINFO_BAR_MAX 5

#define TEAMINFO_BARMAX 100

#define horizontal 0
#define vertical 1

#define straight 0
#define flipped 2

str TeamBarsStrings[TEAMINFO_BAR_START+TEAMINFO_BAR_MAX+1][4] = {
    // Fonts
    {"UXHPHORZ", "UXHPVERT", "UXHPHORZ", "UXHPVERT"},
    // Empty
    {"________________________________________________________________", "_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_", "________________________________________________________________", "_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_"},
    // 000-100
    {"ABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABAB", "A\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB", "BABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABA", "A\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB\nA\nB"},
    // 100-200
    {"CDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCD", "C\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD", "DCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDC", "C\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD\nC\nD"},
    // 200-300
    {"EFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEF", "E\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF", "FEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFE", "E\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF\nE\nF"},
    // 300-400
    {"GHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGH", "G\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH", "HGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHGHG", "G\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH\nG\nH"},
    // 400-500
    {"IJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJ", "I\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ", "JIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJI", "I\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ"},
    // copy the last one here to buffer the "max health"
    {"IJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJ", "I\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ", "JIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJIJI", "I\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ\nI\nJ"},
};

str nameFonts[2] = {
    "SMALLFNT",
    "SIDEFNTL",
};

script "UITweaks_TeamInfo" (int cam, int cpn, int cv)
{
    int baseAlpha = GetUserCvar(cpn, "UIX_CL_TEAMINFOALPHA");

    int stackOffs = 33;

    if(GetUserCvar(cpn, "UIX_CL_TEAMINFOSTACK"))
        stackOffs *= -1;

    if(!GetCvar("UIX_SV_TEAMINFO"))
        terminate;

    if(baseAlpha == 0.0)
        terminate;

    if(CheckActorInventory(cam, "UIX_NoTeamBar") > 0)
        terminate;

    SetActivator(cam);
    int pln = PlayerNumber();
    SetActivator(-1);

    if(pln == -1)
        terminate;

    int team = getPlayerTeam(pln);
    // Log(i:team, s:" cam: ", i:cam);

    if(team == 255) { // Spectator

    } else {
        int startX = GetUserCvar(cpn, "UIX_CL_TEAMINFOOFFSX");
        int startY = -GetUserCvar(cpn, "UIX_CL_TEAMINFOOFFSY");
        int baseScale = GetUserCvar(cpn, "UIX_CL_TEAMINFOSCALE");

        int curPlay = 0;

        int msgId = BASE_ID + TEAMINFO_ID_OFFS;

        bool drawName = GetUserCvar(cpn, "UIX_CL_TEAMINFOSHOWNAME");
        bool drawHealth = GetUserCvar(cpn, "UIX_CL_TEAMINFOSHOWHEALTH");
        bool drawLocation = GetUserCvar(cpn, "UIX_CL_TEAMINFOSHOWLOCATION");
        bool drawCompass = GetUserCvar(cpn, "UIX_CL_TEAMINFOSHOWCOMPASS");
        bool drawMugshot = GetUserCvar(cpn, "UIX_CL_TEAMINFOSHOWMUGSHOT");

        int orientation = GetUserCvar(cpn, "UIX_CL_TEAMINFODIR");
        int mirrored = GetUserCvar(cpn, "UIX_CL_TEAMINFOMIRROR") * 2;

        bool fontVers = GetUserCvar(cpn, "UIX_CL_TEAMINFOFONTDIR");

        int maxNameLength = GetUserCvar(cpn, "UIX_CL_TEAMINFONAMESIZE");

        for(int i = 0; i < MAX_PLAYERS_SHRT; i++) {
            // Log(i:i, s:" == ", i:pln);
            if(i == pln)
                continue;

            // Log(i:i, s:"in game? ", i:PlayerInGame(i));
            if(!PlayerInGame(i))
                continue;

            // Log(i:i, s:" team: ", i:GetPlayerInfo(i, PLAYERINFO_TEAM), s:" == ", i:team);
            if(getPlayerTeam(i) != team)
                continue;

            // Log(s:"Made it into main for player ", i:i, s:" while viewing player ", i:pln);

            // many variables
            int baseX, baseY;
            int xOffs, yOffs;
            int nameX, nameY;
            int barX, barY;
            int compassX, compassY;
            int mugX, mugY;
            int locX, locY;

            int curId = msgId + curPlay;
            int plrTid = i + PLN_TID_SHRT;

            if(orientation == horizontal) {
                if(mirrored == straight) {
                    xOffs = 0;
                    yOffs = FixedMul(baseScale, curPlay * stackOffs);

                    baseX = startX;
                    baseY = startY - yOffs;

                    nameX = baseX;
                    nameY = baseY + FixedMul(baseScale, -2);

                    barX = baseX;
                    barY = baseY + FixedMul(baseScale, 8);

                    compassX = baseX+FixedMul(baseScale, 32);
                    compassY = baseY+FixedMul(baseScale, 32);

                    mugX = baseX-FixedMul(baseScale, 15);
                    mugY = baseY+FixedMul(baseScale, 10);
                } else {
                    xOffs = 0;
                    yOffs = FixedMul(baseScale, curPlay * stackOffs);

                    baseX = startX;
                    baseY = startY - yOffs;

                    nameX = baseX + FixedMul(baseScale, 32);
                    nameY = baseY;

                    barX = baseX - FixedMul(baseScale, 64);
                    barY = baseY + FixedMul(baseScale, 8);

                    compassX = baseX+FixedMul(baseScale, 32);
                    compassY = baseY+FixedMul(baseScale, 32);

                    mugX = baseX+FixedMul(baseScale, 48);
                    mugY = baseY+FixedMul(baseScale, 10);
                }
            } else {
                if(mirrored == straight) {
                    xOffs = FixedMul(baseScale, curPlay * stackOffs);
                    yOffs = 0;

                    baseX = startX + xOffs;
                    baseY = startY;

                    nameX = baseX;
                    nameY = baseY;

                    barX = baseX + FixedMul(baseScale, 8);
                    barY = baseY;

                    compassX = baseX;
                    compassY = baseY;

                    mugX = baseX+FixedMul(baseScale, 12);
                    mugY = baseY-FixedMul(baseScale, 16);
                } else {
                    xOffs = FixedMul(baseScale, curPlay * stackOffs);
                    yOffs = 0;

                    baseX = startX + xOffs;
                    baseY = startY;

                    nameX = baseX;
                    nameY = baseY;

                    barX = baseX + FixedMul(baseScale, 8);
                    barY = baseY - FixedMul(baseScale, 98);

                    compassX = baseX;
                    compassY = baseY;

                    mugX = baseX+FixedMul(baseScale, 12);
                    mugY = baseY+FixedMul(baseScale, 16);
                }
            }

            if(drawName) {
                str nameFont = nameFonts[orientation ^ fontVers];

                int nameScale = baseScale;
                int nameLength = getCacheNameWidth(i, orientation, !fontVers);

                if(nameLength > maxNameLength) {
                    nameScale = FixedMul(baseScale, FixedDiv(maxNameLength, nameLength));
                }

            //     str loc = 0;
            //     if(drawLocation)
            //         loc = rotateLocation(i+PLN_TID_SHRT, orientation);

                if(orientation == horizontal) {
                    SetFont(nameFont);
                    if(mirrored == straight) {
                        displayMessageL(StrParam(s:getPlayerName(i, orientation, false)), curId+TEAMINFO_ID_NAME, nameX, nameY, nameScale, baseScale, baseAlpha);
                    } else {
                        displayMessageR(StrParam(s:getPlayerName(i, orientation, false)), curId+TEAMINFO_ID_NAME, nameX, nameY, nameScale, baseScale, baseAlpha);
                    }
                } else {
                    SetFont(nameFont);
                    if(mirrored == straight) {
                        displayMessageL(StrParam(s:getPlayerName(i, orientation, !fontVers)), curId+TEAMINFO_ID_NAME, nameX, nameY, baseScale, nameScale, baseAlpha);
                    } else {
                        displayMessageU(StrParam(s:getPlayerName(i, orientation, !fontVers)), curId+TEAMINFO_ID_NAME, nameX, nameY, baseScale, nameScale, baseAlpha);
                    }
                }
            }

            int mhp = GetActorProperty(plrTid, AProp_SpawnHealth);
            if(drawHealth && mhp > 0) {
                int chp = GetActorProperty(plrTid, AProp_Health);
                int sbar_orientation = orientation ? 1 : 2;

                int hpWidth = orientation ? 80 : 640;
                int hpHeight = orientation ? 640 : 80;

                int hpTop = orientation ? "UXTEMHV1" : "UXTEMHH1";
                int hpBot = orientation ? "UXTEMHVB" : "UXTEMHHB";

                int barScale = FixedMul(FixedMul(baseScale, 1.5), 0.1);
                drawBar(hpTop, hpBot, barX, barY, hpWidth, hpHeight, barScale, barScale, baseAlpha, chp, mhp, sbar_orientation, false, getNewUIId(), getNewUIId());
            }

            if(drawCompass) {
                int baseYaw = GetActorAngle(cam) - VectorAngle(GetActorX(cam)-GetActorX(plrTid), GetActorY(cam)-GetActorY(plrTid)) + 0.25;
                int size = 16;
                int compassScale = FixedMul(baseScale, 1.3);
                int compassScaleDiff = FixedMul(baseScale, 0.3);

                int dist = (dist3D(0, i+PLN_TID_SHRT)) / 32;

                SetFont("SMALLFONT");
                displayMessage(StrParam(s:"\ca", i:dist, s:"m"), curId+TEAMINFO_ID_ARR1, compassX, compassY, compassScale-compassScaleDiff, compassScale-compassScaleDiff, baseAlpha);
                displayMessage("\c[UIXArrowBright]+", curId+TEAMINFO_ID_ARR2, compassX+FixedMul(cos(baseYaw),      size), compassY+FixedMul(sin(baseYaw),      size), compassScale, compassScale, baseAlpha);
                displayMessage("\c[UIXArrowMid]+",    curId+TEAMINFO_ID_ARR3, compassX+FixedMul(cos(baseYaw+0.1),  size), compassY+FixedMul(sin(baseYaw+0.1),  size), compassScale-compassScaleDiff, compassScale-compassScaleDiff, baseAlpha);
                displayMessage("\c[UIXArrowMid]+",    curId+TEAMINFO_ID_ARR4, compassX+FixedMul(cos(baseYaw-0.1),  size), compassY+FixedMul(sin(baseYaw-0.1),  size), compassScale-compassScaleDiff, compassScale-compassScaleDiff, baseAlpha);
                displayMessage("\c[UIXArrowDark]+",   curId+TEAMINFO_ID_ARR5, compassX+FixedMul(cos(baseYaw+0.18), size), compassY+FixedMul(sin(baseYaw+0.18), size), compassScale-2*compassScaleDiff, compassScale-2*compassScaleDiff, baseAlpha);
                displayMessage("\c[UIXArrowDark]+",   curId+TEAMINFO_ID_ARR6, compassX+FixedMul(cos(baseYaw-0.18), size), compassY+FixedMul(sin(baseYaw-0.18), size), compassScale-2*compassScaleDiff, compassScale-2*compassScaleDiff, baseAlpha);
            }

            if(drawMugshot) {
                str face = getMugshotGraphicFromTID(plrTid);
                int faceScale = FixedMul(baseScale, 3.0);
                if(face != 0)
                    if(StrLen(face) > 0)
                        displayIcon(face, curId+TEAMINFO_ID_MUG, mugX, mugY, faceScale, faceScale, baseAlpha);
            }

            // if(wep != -1) {
            //     int ammo = getWeaponAmmoType(wep);
            //     int mwe = getPlayerAmmoCapacity(i, ammo);
            //     int cwe = checkActorInventory(i+PLN_TID_SHRT, ammo);
            //     // PrintBold(i:mwe);
            //     displayIcon(getWeaponIcon(wep), curId+TEAMINFO_ID_WEI, barX+16, barY+32, 1.0, 1.0, 1.0);
            //     displayHBar("UIXWEFH", "UIXHPBH", cwe, mwe, curId+TEAMINFO_ID_WE1, curId+TEAMINFO_ID_WE2, barX+16, barY+16, 1.0, 1.0, 1.0);
            // }

            curPlay++;
        }

        if(GetCvar("temp_uix_namestore_reverse") != fontVers) {
            SetCvar("temp_uix_namestore_reverse", fontVers);
        }
    }
}

// from pingbutton
function str getMugshotGraphicFromTID(int tid) {
	str class = GetActorClass(tid);

	int u = UniqueTID();
	if(!SpawnForced(StrParam(s:"PBMug_", s:class), 0, 0, 0, u, 0)) {
		return "";
	}
	Thing_Remove(u);

	return ACS_NamedExecuteWithResult(StrParam(s:"PBMug_", s:class), tid);
}

#define NAME_MAX 1000
#define CHAR_COLOR 28

int nameSize;
int nameBuilder[NAME_MAX];

int nameColorless[NAME_MAX];
int nameColors[NAME_MAX];
int colorPos[NAME_MAX][3];

function int getColorPos(int i) { return colorPos[i][0]; }
function int getColorStart(int i) { return colorPos[i][1]; }
function int getColorEnd(int i) { return colorPos[i][2]; }

function void setColorPos(int i, int val) { colorPos[i][0] = val; }
function void setColorStart(int i, int val) { colorPos[i][1] = val; }
function void setColorEnd(int i, int val) { colorPos[i][2] = val; }

// output of rebuildString stored here.
str cacheKey;
str cacheVert;
str cacheVertReverse;
int cacheWidth;
int cacheHeight;
int cacheHeightReverse;

function void rebuildString(str name) {
    cacheKey = name;

    strCpy(a:nameBuilder, name);
    nameSize = StrLen(name);

    str outName = "";

    int inColor = 0;
    int colorStart;

    int colorLessSize = 0;
    int colorsLength = 0;
    int colorsCount = 0;

    int i;

    int nameWidth = 0;

    for(i = 0; i < nameSize; i++) {
        switch(inColor) {
            case 0:
                if(nameBuilder[i] == CHAR_COLOR) {
                    inColor = 1;
                    setColorPos(colorsCount, colorLessSize);
                    setColorStart(colorsCount, colorsLength);
                } else {
                    nameColorless[colorLessSize++] = nameBuilder[i];
                    nameWidth += charWidths[nameBuilder[i]];
                }
                break;
            case 1: // check next char
                if(nameBuilder[i] == '[') {
                    colorStart = i;
                    inColor = 2;
                    setColorPos(colorsCount, colorLessSize);
                    setColorStart(colorsCount, colorsLength);
                    nameColors[colorsLength++] = nameBuilder[i];
                } else {
                    inColor = 0;
                    nameColors[colorsLength++] = nameBuilder[i];
                    setColorEnd(colorsCount, colorsLength);
                    colorsCount++;
                }
                break;
            case 2: // in big string
                nameColors[colorsLength++] = nameBuilder[i];
                if(nameBuilder[i] == ']') {
                    inColor = 0;
                    setColorEnd(colorsCount, colorsLength);
                    colorsCount++;
                }
                break;
        }
        nameBuilder[i] = 0;
    }

    // // Cache test
    // Log(a:(nameColorless, 0, colorLessSize));
    // Log(a:(nameColors, 0, colorsLength));

    // // Colors test
    // str tpos = StrParam(i:getColorPos(0));
    // str tstart = StrParam(i:getColorStart(0));
    // str tend = StrParam(i:getColorEnd(0));
    // for(i = 1; i < colorsCount; i++) {
    //     tpos = StrParam(s:tpos, s:", ", i:getColorPos(i));
    //     tstart = StrParam(s:tstart, s:", ", i:getColorStart(i));
    //     tend = StrParam(s:tend, s:", ", i:getColorEnd(i));
    // }
    // Log(s:tstart);
    // Log(s:tend);
    // Log(s:tpos);

    int c, nidx, curCol;

    // vertical
    nidx = 0;
    curCol = -1;
    for(i = 0; i < colorLessSize; i++) {
        if(i == getColorPos(curCol+1)) {
            curCol++;
        }

        if(nameColorless[i] != ' ') {
            if(curCol > -1) {
                nameBuilder[nidx++] = CHAR_COLOR;
                for(c = getColorStart(curCol); c < getColorEnd(curCol); c++) {
                    nameBuilder[nidx++] = nameColors[c];
                }
            }
            nameBuilder[nidx++] = nameColorless[i];
        }

        nameBuilder[nidx++] = '\n';
    }

    cacheVert = StrParam(a:(nameBuilder, 0, nidx));
    
    // verticalreverse
    nidx = 0;
    curCol = colorsCount-1;
    for(i = colorLessSize; i > 0; i--) {
        if(i == getColorPos(curCol)) {
            curCol--;
        }

        if(nameColorless[i-1] != ' ') {
            if(curCol < colorsCount) {
                nameBuilder[nidx++] = CHAR_COLOR;
                for(c = getColorStart(curCol); c < getColorEnd(curCol); c++) {
                    nameBuilder[nidx++] = nameColors[c];
                }
            }
            nameBuilder[nidx++] = nameColorless[i-1];
        }

        nameBuilder[nidx++] = '\n';
    }

    cacheVertReverse = StrParam(a:(nameBuilder, 0, nidx));
    cacheWidth = nameWidth;
    cacheHeight = colorLessSize * 11;
    cacheHeightReverse = colorLessSize * 9;
}

// bool init
// string name
// string vertical
// string reversevertical
// int width horizontal
// int width vertical
// int width vertical reverse
//
str namesCache[64][7];

function int isCacheInit(int plr) { return namesCache[plr][0]; }
function void setCacheInit(int plr, int val) { namesCache[plr][0] = val; }

function str getCacheName(int plr, int o, int r) { return namesCache[plr][1 + (o ? o + r : 0)]; }
function void setCacheName(int plr, int o, int r, str val) { namesCache[plr][1 + (o ? o + r : 0)] = val; }

function int getCacheNameWidth(int plr, int o, int r) { return namesCache[plr][5 + (o ? o + r : 0)]; }
function void setCacheNameWidth(int plr, int o, int r, int val) { namesCache[plr][5 + (o ? o + r : 0)] = val; }

function bool needsReset(int plr, str name)
{
    // [Russ] keeping in pattern with other uix stuff, short circuit the most important fail case
    if(!isCacheInit(plr)) {
        Log(s:"init");
        return true;
    }

    if(StrCmp(name, getCacheName(plr, 0, 0)) != 0) {
        Log(s:"mismatch: ", s:name, s:" ", s:getCacheName(plr, 0, 0));
        return true;
    }

    return false;
}

function str getPlayerName(int plr, int o, int r)
{
    str name = StrParam(n:1+plr);

    if(needsReset(plr, name)) {
        Log(s:"Rebuilding name for ", s:name);
        rebuildString(name);

        setCacheInit(plr, true);
        setCacheName(plr, false, false, cacheKey);
        setCacheName(plr, true, false, cacheVert);
        setCacheName(plr, true, true, cacheVertReverse);
        setCacheNameWidth(plr, false, false, cacheWidth);
        setCacheNameWidth(plr, true, false, cacheHeight);
        setCacheNameWidth(plr, true, true, cacheHeightReverse);
    }

    return getCacheName(plr, o, r);
}

#define LOC_SIZE_LIMIT 1000
int LOC_SIZE = 0;

str locs[LOC_SIZE_LIMIT][3];

// function str rotateLocation(int tid, int vert)
// {
//     str loc = GetActorSectorLocation(tid, false);

//     if(StrLen(loc) == 0)
//         return 0;

//     loc = StrParam(s:"\cf(", s:loc, s:"\cf)");

//     if(!vert)
//         return loc;

//     int idx = findLoc(loc);

//     bool update = false;

//     if(idx == -1)
//         update = true;

//     int cv = GetUserCvar(ConsolePlayerNumber(), "UIX_CL_TEAMINFOFONTDIR");

//     if(!update)
//         if(locs[idx][2] != cv)
//             update = true;

//     if(update) {
//         if(idx == -1)
//             idx = LOC_SIZE++;

//         locs[idx][0] = loc;
//         locs[idx][1] = rebuildName(loc, cv);
//         locs[idx][2] = cv;
//     }

//     return locs[idx][1];
// }

// function int findLoc(str loc) {
//     for(int i = 0; i < LOC_SIZE; i++) {
//         if(StrCmp(loc, locs[i][0])==0) {
//             return i;
//         }
//     }
//     return -1;
// }

function int getPlayerNameLength(int plr, int vert) {
    return 0;
}

// [russ] surely i'll redo this cache system at some point to actually work smarter not harder
// int nameLengths[MAX_PLAYERS_SHRT][3];

// function int getPlayerNameLength(int plr, int vert) {
//     str name = StrParam(n:1+plr);

//     if(StrCmp(nameLengths[plr][2], name) != 0) {
//         strCpy(a:nameBuilder, name);
//         nameSize = StrLen(name);

//         str outName = "";

//         int inColor = 0;
//         int colorStart;

//         int colorLessSize = 0;
//         int colorSize = 0;

//         int i;

//         int vertLen = 0;
//         int horzLen = 0;

//         for(i = 0; i < nameSize; i++) {
//             switch(inColor) {
//                 case 0:
//                     if(nameBuilder[i] == CHAR_COLOR) {
//                         colorPos[colorSize] = colorLessSize;
//                         inColor = 1;
//                     } else {
//                         horzLen += charWidths[nameBuilder[i]];
//                         vertLen += 9;
//                     }
//                     break;
//                 case 1: // check next char
//                     if(nameBuilder[i] == '[') {
//                         colorStart = i;
//                         inColor = 2;
//                     } else {
//                         inColor = 0;
//                     }
//                     break;
//                 case 2: // in big string
//                     if(nameBuilder[i] == ']') {
//                         inColor = 0;
//                     }
//                     break;
//             }
//         }

//         nameLengths[plr][0] = horzLen;
//         nameLengths[plr][1] = vertLen;
//     }

//     return nameLengths[plr][vert];
// }
