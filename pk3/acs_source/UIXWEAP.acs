#library "UIXWEAP"

#include "zcommon.acs"

#import "8BDT.acs"

#include "SHRTFUNC.acs"

#include "UXTBWBAR.acs"
#include "UXTBWOVR.acs"

/*
DATA NEEDED:
- Wep Actor
- Wep Ammo1
- Wep Ammo2?
- Icon
- Slot
*/

#define BARDATA_FIELDS 9

#define BARDATA_CHECKED 0
#define BARDATA_SELECTED 1
#define BARDATA_CYAN1 2
#define BARDATA_BLUE1 3
#define BARDATA_CYAN2 4
#define BARDATA_BLUE2 5
#define BARDATA_AMMOTYPE1 6
#define BARDATA_AMMOTYPE2 7
#define BARDATA_SLOT 8

int wepBarData[MAX_WEAPONS_GLOBAL_LIMIT][BARDATA_FIELDS];
int bustBarData[MAX_BUSTER_LIMIT][BARDATA_FIELDS];
str drawBusters[MAX_BUSTER_LIMIT];
int buster_count = 0;

#define WEPBAR_X_OFFS 16
#define WEPBAR_Y_OFFS 24
#define WEPBAR_SPACING 2

#define WEPBAR_BAR_WIDTH 4
#define WEPBAR_ICON_WIDTH 16

script "UIXPickupTest" (void)
{
    int offs = 48;
    int baseX = GetActorX(0);
    int baseY = GetActorY(0);
    int baseZ = GetActorZ(0);
    int yaw = GetActorAngle(0);
    int utid = UniqueTID();

    for(int i = 0; i < MAX_ITEMS_GLOBAL; i++) {
        int x = baseX + cos(yaw)*(i+1)*offs;
        int y = baseY + sin(yaw)*(i+1)*offs;

        SpawnForced(getAssistItemActor(i), x, y, baseZ, utid, 0);
        GiveActorInventory(utid, "ChangeFlagDropped0", 1);
        Thing_ChangeTID(utid, 0);
    }
}

int cvAlpha;
int cvShowSlots;
int cvMirror;
int cvDir;
int cvScale;
int cvOffsX;
int cvOffsY;
int cvMaxRow;

int cacheCvMirror;
int cacheCvDir;
int cacheCvScale;
int cacheCvOffsX;
int cacheCvOffsY;
int cacheCvMaxRow;

int weightOffsX;
int weightOffsY;

int slotOffsX;
int slotOffsY;

int barX;
int barY;

int barX1;
int barY1;

int barX2;
int barY2;

int barHeight;
int barWidth;
int barScale;

int slotX;
int slotY;

int selectedX;
int selectedY;

int overflowX;
int overflowY;
int overflowScale;

int HAlign;
int OverflowHAlign;

// Columns
#define WEIGHTOFFS_X_00 0
#define WEIGHTOFFS_Y_00 -12

#define WEIGHTOFFS_X_01 0
#define WEIGHTOFFS_Y_01 12

#define WEIGHTOFFS_X_10 12
#define WEIGHTOFFS_Y_10 0

#define WEIGHTOFFS_X_11 -12
#define WEIGHTOFFS_Y_11 0

// Rows
#define SLOTOFFS_X_00 20
#define SLOTOFFS_Y_00 0

#define SLOTOFFS_X_01 20
#define SLOTOFFS_Y_01 0

#define SLOTOFFS_X_10 0
#define SLOTOFFS_Y_10 20

#define SLOTOFFS_X_11 0
#define SLOTOFFS_Y_11 20

// Single bar
#define BAR_X_00 -16
#define BAR_Y_00 -28

#define BAR_X_01 -16
#define BAR_Y_01 -9

#define BAR_X_10 -1
#define BAR_Y_10 -24

#define BAR_X_11 -19
#define BAR_Y_11 -24

// Bar 1
#define BAR1_X_00 -16
#define BAR1_Y_00 -28

#define BAR1_X_01 -16
#define BAR1_Y_01 -5

#define BAR1_X_10 3
#define BAR1_Y_10 -24

#define BAR1_X_11 -19
#define BAR1_Y_11 -24

// Bar 2
#define BAR2_X_00 -16
#define BAR2_Y_00 -32

#define BAR2_X_01 -16
#define BAR2_Y_01 -9

#define BAR2_X_10 -1
#define BAR2_Y_10 -24

#define BAR2_X_11 -23
#define BAR2_Y_11 -24

// Slot number
#define SLOT_X_00 -3
#define SLOT_Y_00 23

#define SLOT_X_01 -12
#define SLOT_Y_01 -54

#define SLOT_X_10 -40
#define SLOT_Y_10 -16

#define SLOT_X_11 26
#define SLOT_Y_11 -16

// Selected icon
#define SELECT_X_00 0
#define SELECT_Y_00 22

#define SELECT_X_01 0
#define SELECT_Y_01 -20

#define SELECT_X_10 -20
#define SELECT_Y_10 0

#define SELECT_X_11 22
#define SELECT_Y_11 0

// Overflow count
#define OVERFLOW_X_00 -16
#define OVERFLOW_Y_00 -23

#define OVERFLOW_X_01 0
#define OVERFLOW_Y_01 -7

#define OVERFLOW_X_10 0
#define OVERFLOW_Y_10 -16

#define OVERFLOW_X_11 -10
#define OVERFLOW_Y_11 -16

#define BUSTER 0
#define COPYWEP 1

#define MAX_SLOTS 10

#define SLOT_BUSTER 1

#define BAR_HEIGHT 160
#define BAR_WIDTH 40
#define BAR_SCALE 0.1

str slotBinds[MAX_SLOTS] = {
    "slot 0","slot 1","slot 2","slot 3","slot 4",
    "slot 5","slot 6","slot 7","slot 8","slot 9",
};

#define WEAP_IDX 0
#define WEAP_TYPE 1
#define WEAP_AMMO1_AMT 2
#define WEAP_AMMO1_MAX 3
#define WEAP_CYAN1 4
#define WEAP_BLUE1 5
#define WEAP_AMMO2_AMT 6
#define WEAP_AMMO2_MAX 7
#define WEAP_CYAN2 8
#define WEAP_BLUE2 9

int slotVals[MAX_SLOTS][MAX_BUSTER_LIMIT+MAX_WEAPONS_GLOBAL_LIMIT][10];
int slotCounts[MAX_SLOTS];

script "UIX_WeapBar" (int cam, int cpn, int cv)
{
    if(!GetCvar("UIX_SV_WEAPBAR"))
        terminate;

    cvAlpha = GetUserCvar(cpn, "UIX_CL_WEAPBARALPHA");

    if(cvAlpha == 0.0)
        terminate;

    SetActivator(cam);
    int pln = PlayerNumber();
    if(pln == -1)
        terminate;
    
    if(CheckInventory("UIX_NoWeaponBar") > 0)
        terminate;

    cvAlpha = GetUserCvar(cpn, "UIX_CL_WEAPBARALPHA");
    cvShowSlots = GetUserCvar(cpn, "UIX_CL_WEAPBARSHOWSLOTS");
    cvMirror = GetUserCvar(cpn, "UIX_CL_WEAPBARMIRROR");
    cvDir = GetUserCvar(cpn, "UIX_CL_WEAPBARDIR");
    cvScale = GetUserCvar(cpn, "UIX_CL_WEAPBARSCALE");
    cvOffsX = GetUserCvar(cpn, "UIX_CL_WEAPBAROFFSX");
    cvOffsY = GetUserCvar(cpn, "UIX_CL_WEAPBAROFFSY");
    cvMaxRow = GetUserCvar(cpn, "UIX_CL_WEAPBARROWMAX");

    if(
        cacheCvMirror != cvMirror ||
        cacheCvDir != cvDir ||
        cacheCvScale != cvScale ||
        cacheCvMaxRow != cvMaxRow
    ) {
        cacheCvMirror = cvMirror;
        cacheCvDir = cvDir;
        cacheCvScale = cvScale;
        cacheCvMaxRow = cvMaxRow;

        weightOffsX = FixedMul(cvScale, (!cvDir ? (!cvMirror ? WEIGHTOFFS_X_00 : WEIGHTOFFS_X_01) : (!cvMirror ? WEIGHTOFFS_X_10 : WEIGHTOFFS_X_11)));
        weightOffsY = FixedMul(cvScale, (!cvDir ? (!cvMirror ? WEIGHTOFFS_Y_00 : WEIGHTOFFS_Y_01) : (!cvMirror ? WEIGHTOFFS_Y_10 : WEIGHTOFFS_Y_11)));

        slotOffsX = FixedMul(cvScale, (!cvDir ? (!cvMirror ? SLOTOFFS_X_00 : SLOTOFFS_X_01) : (!cvMirror ? SLOTOFFS_X_10 : SLOTOFFS_X_11)));
        slotOffsY = FixedMul(cvScale, (!cvDir ? (!cvMirror ? SLOTOFFS_Y_00 : SLOTOFFS_Y_01) : (!cvMirror ? SLOTOFFS_Y_10 : SLOTOFFS_Y_11)));

        barWidth = (cvDir ? BAR_WIDTH : BAR_HEIGHT);
        barHeight = (cvDir ? BAR_HEIGHT : BAR_WIDTH);
        barScale = FixedMul(cvScale, BAR_SCALE);
        
        barX = FixedMul(cvScale, (!cvDir ? (!cvMirror ? BAR_X_00 : BAR_X_01) : (!cvMirror ? BAR_X_10 : BAR_X_11)));
        barY = FixedMul(cvScale, (!cvDir ? (!cvMirror ? BAR_Y_00 : BAR_Y_01) : (!cvMirror ? BAR_Y_10 : BAR_Y_11)));

        barX1 = FixedMul(cvScale, (!cvDir ? (!cvMirror ? BAR1_X_00 : BAR1_X_01) : (!cvMirror ? BAR1_X_10 : BAR1_X_11)));
        barY1 = FixedMul(cvScale, (!cvDir ? (!cvMirror ? BAR1_Y_00 : BAR1_Y_01) : (!cvMirror ? BAR1_Y_10 : BAR1_Y_11)));
        
        barX2 = FixedMul(cvScale, (!cvDir ? (!cvMirror ? BAR2_X_00 : BAR2_X_01) : (!cvMirror ? BAR2_X_10 : BAR2_X_11)));
        barY2 = FixedMul(cvScale, (!cvDir ? (!cvMirror ? BAR2_Y_00 : BAR2_Y_01) : (!cvMirror ? BAR2_Y_10 : BAR2_Y_11)));
        
        slotX = FixedMul(cvScale, (!cvDir ? (!cvMirror ? SLOT_X_00 : SLOT_X_01) : (!cvMirror ? SLOT_X_10 : SLOT_X_11)));
        slotY = FixedMul(cvScale, (!cvDir ? (!cvMirror ? SLOT_Y_00 : SLOT_Y_01) : (!cvMirror ? SLOT_Y_10 : SLOT_Y_11)));
        HAlign = (cvMirror ? ALIGN_LEFT : ALIGN_RIGHT);
        OverflowHAlign = (!cvMirror ? ALIGN_LEFT : ALIGN_RIGHT);

        selectedX = FixedMul(cvScale, (!cvDir ? (!cvMirror ? SELECT_X_00 : SELECT_X_01) : (!cvMirror ? SELECT_X_10 : SELECT_X_11)));
        selectedY = FixedMul(cvScale, (!cvDir ? (!cvMirror ? SELECT_Y_00 : SELECT_Y_01) : (!cvMirror ? SELECT_Y_10 : SELECT_Y_11)));

        overflowX = cvMaxRow * weightOffsX + FixedMul(cvScale, (!cvDir ? (!cvMirror ? OVERFLOW_X_00 : OVERFLOW_X_01) : (!cvMirror ? OVERFLOW_X_10 : OVERFLOW_X_11)));
        overflowY = cvMaxRow * weightOffsY + FixedMul(cvScale, (!cvDir ? (!cvMirror ? OVERFLOW_Y_00 : OVERFLOW_Y_01) : (!cvMirror ? OVERFLOW_Y_10 : OVERFLOW_Y_11)));
        overflowScale = cvDir ? cvScale : FixedMul(cvScale, 0.7);
    }
    
    int i;
    int slot, icon, ammo1, ammo2;

    int selectedSlot = -1; 
    int selected = -1;

    int check;

    for(i = MAX_BUSTERUPGRADES-1; i >= 0; i--)
    {
        check = getBusterActor(i);

        // Don't have it, don't care.
        if(!CheckActorInventory(cam, check))
            continue;
        
        // Buster's got info in the ammo table, don't care.
        if(busterMap(i) != -1)
            continue;
        
        if(selected == -1) {
            if(CheckWeapon(check)) {
                selectedSlot = SLOT_BUSTER;
                selected = slotCounts[SLOT_BUSTER];
            }
        }

        slotVals[SLOT_BUSTER][slotCounts[SLOT_BUSTER]][WEAP_IDX] = i;
        slotVals[SLOT_BUSTER][slotCounts[SLOT_BUSTER]][WEAP_TYPE] = BUSTER;
        slotCounts[SLOT_BUSTER]++;
    }

    for(i = MAX_WEAPONS_GLOBAL-1; i >= 0; i--)
    {
        check = getWeaponActor(i);

        // Don't have it, don't care.
        if(!CheckActorInventory(cam, check))
            continue;
        
        slot = getWeaponSlot(i);
        
        if(selected == -1) {
            if(CheckWeapon(check)) {
                selectedSlot = slot;
                selected = slotCounts[slot];
            }
        }

        slotVals[slot][slotCounts[slot]][WEAP_IDX] = i;
        slotVals[slot][slotCounts[slot]][WEAP_TYPE] = COPYWEP;

        ammo1 = getWeaponAmmoType(i);
        ammo2 = getWeaponAmmo2Type(i);
        
        if(strLen(ammo1) != 0) {
            slotVals[slot][slotCounts[slot]][WEAP_AMMO1_AMT] = CheckInventory(ammo1);
            slotVals[slot][slotCounts[slot]][WEAP_AMMO1_MAX] = GetAmmoCapacity(ammo1);
            slotVals[slot][slotCounts[slot]][WEAP_CYAN1] = UIXAmmoBars[cvDir][0][weaponBarColor(i, 1)];
            slotVals[slot][slotCounts[slot]][WEAP_BLUE1] = UIXAmmoBars[cvDir][1][weaponBarColor(i, 2)];
        }

        if(strLen(ammo2) != 0) {
            slotVals[slot][slotCounts[slot]][WEAP_AMMO2_AMT] = CheckInventory(ammo2);
            slotVals[slot][slotCounts[slot]][WEAP_AMMO2_MAX] = GetAmmoCapacity(ammo2);
            slotVals[slot][slotCounts[slot]][WEAP_CYAN2] = UIXAmmoBars[cvDir][0][weaponBarColor(i, 3)];
            slotVals[slot][slotCounts[slot]][WEAP_BLUE2] = UIXAmmoBars[cvDir][1][weaponBarColor(i, 4)];
        }
        slotCounts[slot]++;
    }
    SetActivator(-1);

    for(int sidx = 0; sidx < MAX_SLOTS; sidx++)
    {
        slot = (sidx + 1) % MAX_SLOTS;
        int baseX = cvOffsX + slotOffsX * slot;
        int baseY = cvOffsY + slotOffsY * slot;
        
        int idx, col;
        if(slot == selectedSlot) {
            idx = selected;
            col = "\c[gold]";
        } else {
            idx = -1;
            col = "\c[darkgray]";
        }
        
        for(i = 0; i < min(slotCounts[slot], cvMaxRow + (slot == selectedSlot)); i++)
        {
            int weap;

            int iconX, iconY;

            if(idx > -1) {
                weap = (i + idx) % slotCounts[slot];

                if(weap == selected) {
                    iconX = baseX + selectedX;
                    iconY = baseY + selectedY;
                } else {
                    iconX = baseX + weightOffsX * (i-1);
                    iconY = baseY + weightOffsY * (i-1);
                    displayIcon("UXICA0", GetNewUIID(), iconX, iconY, cvScale, cvScale, FixedMul(cvAlpha, 0.5), ALIGN_CENTER, ALIGN_CENTER);
                }
            } else {
                weap = i;

                iconX = baseX + weightOffsX * i;
                iconY = baseY + weightOffsY * i;
                displayIcon("UXICA0", GetNewUIID(), iconX, iconY, cvScale, cvScale, FixedMul(cvAlpha, 0.5), ALIGN_CENTER, ALIGN_CENTER);
            }

            if(!slotVals[slot][weap][WEAP_TYPE]) {
                icon = getBusterIcon(slotVals[slot][weap][WEAP_IDX]);
            } else {
                icon = getWeaponIcon(slotVals[slot][weap][WEAP_IDX]);

                if(slotVals[slot][weap][WEAP_AMMO2_MAX] > 0) {
                    drawLayeredBar(slotVals[slot][weap][WEAP_CYAN2],
                                   slotVals[slot][weap][WEAP_BLUE2],
                                   UIXAmmoBars[cvDir][2][0],
                                   iconX + barX2,
                                   iconY + barY2,
                                   barWidth, barHeight,
                                   barScale, barScale, cvAlpha,
                                   slotVals[slot][weap][WEAP_AMMO2_AMT],
                                   slotVals[slot][weap][WEAP_AMMO2_MAX],
                                   !cvDir+1, false, GetNewUIID(), GetNewUIID(), GetNewUIID(), ALIGN_LEFT, ALIGN_TOP);
                    // Draw the bar1 based on whether the bar2 will be drawn.
                    // Bar2 draws on top of bar1, or to the left of bar1, in all circumstances.
                    if(slotVals[slot][weap][WEAP_AMMO1_MAX] > 0) {
                        drawLayeredBar(slotVals[slot][weap][WEAP_CYAN1],
                                        slotVals[slot][weap][WEAP_BLUE1],
                                        UIXAmmoBars[cvDir][2][0],
                                        iconX + barX1,
                                        iconY + barY1,
                                        barWidth, barHeight,
                                        barScale, barScale, cvAlpha,
                                        slotVals[slot][weap][WEAP_AMMO1_AMT],
                                        slotVals[slot][weap][WEAP_AMMO1_MAX],
                                        !cvDir+1, false, GetNewUIID(), GetNewUIID(), GetNewUIID(), ALIGN_LEFT, ALIGN_TOP);
                    }
                } else {
                    if(slotVals[slot][weap][WEAP_AMMO1_MAX] > 0) {
                        drawLayeredBar(slotVals[slot][weap][WEAP_CYAN1],
                                        slotVals[slot][weap][WEAP_BLUE1],
                                        UIXAmmoBars[cvDir][2][0],
                                        iconX + barX,
                                        iconY + barY,
                                        barWidth, barHeight,
                                        barScale, barScale, cvAlpha,
                                        slotVals[slot][weap][WEAP_AMMO1_AMT],
                                        slotVals[slot][weap][WEAP_AMMO1_MAX],
                                        !cvDir+1, false, GetNewUIID(), GetNewUIID(), GetNewUIID(), ALIGN_LEFT, ALIGN_TOP);
                    }
                }
            }
            displayIcon(icon, GetNewUIID(), iconX, iconY, cvScale, cvScale, cvAlpha, ALIGN_CENTER, ALIGN_CENTER);
        }

        if(slotCounts[slot]) {
            SetFont("SMALLFONT");
            if(cvShowSlots)
                displayMessage(StrParam(s:col, k:slotBinds[slot]), GetNewUIID(), baseX + slotX, baseY + slotY, cvScale, cvScale, cvAlpha, HAlign, 0);

            if(slotCounts[slot] > cvMaxRow) {
                displayMessage(UIXWEAP_OverflowNums[slotCounts[slot]-i], GetNewUIID(), baseX + overflowX, baseY + overflowY, overflowScale, overflowScale, cvAlpha, OverflowHAlign, 0);
            }
        }

        slotCounts[slot] = 0;
    }
}

// 0: init
// 1: cyan1
// 2: blue1
// 3: cyan2
// 4: blue2
// 6: busterIdx
//
int newProperties[MAX_WEAPONS_GLOBAL_LIMIT][6];

// 0: init
// 1: weaponSlot
//
int busterInit[MAX_BUSTER_LIMIT][2];

function int WeaponBarColor(int idx, int col)
{
    if(newProperties[idx][0])
        return newProperties[idx][col];

    readWeaponBars(getWeaponActor(idx));
    
    newProperties[idx][0] = true;
    newProperties[idx][1] = readCyan1;
    newProperties[idx][2] = readBlue1;
    newProperties[idx][3] = readCyan2;
    newProperties[idx][4] = readBlue2;

    return newProperties[idx][col];
}

function int busterMap(int idx)
{
    if(busterInit[idx][0])
        return busterInit[idx][1];
    
    int wep = findWeaponByActor(getBusterActor(idx));

    busterInit[idx][0] = true;
    busterInit[idx][1] = wep;

    return wep;
}
