#library "UIXWEAP"

#include "zcommon.acs"

#include "SHRTFUNC.acs"

#import "8BDT.acs"

/*
DATA NEEDED:
- Wep Actor
- Wep Ammo1
- Wep Ammo2?
- Icon
- Slot
*/

#define BARDATA_FIELDS 9

#define BARDATA_CHECKED 0
#define BARDATA_SELECTED 1
#define BARDATA_CYAN1 2
#define BARDATA_BLUE1 3
#define BARDATA_CYAN2 4
#define BARDATA_BLUE2 5
#define BARDATA_AMMOTYPE1 6
#define BARDATA_AMMOTYPE2 7
#define BARDATA_SLOT 8

int wepBarData[MAX_WEAPONS_GLOBAL_LIMIT][BARDATA_FIELDS];
int bustBarData[MAX_BUSTER_LIMIT][BARDATA_FIELDS];
str drawBusters[MAX_BUSTER_LIMIT];
int buster_count = 0;

#define WEPBAR_X_OFFS 16
#define WEPBAR_Y_OFFS 24
#define WEPBAR_SPACING 2

#define WEPBAR_BAR_WIDTH 4
#define WEPBAR_ICON_WIDTH 16

script "UIXPickupTest" (void)
{
    int offs = 48;
    int baseX = GetActorX(0);
    int baseY = GetActorY(0);
    int baseZ = GetActorZ(0);
    int yaw = GetActorAngle(0);
    int utid = UniqueTID();

    for(int i = 0; i < MAX_ITEMS_GLOBAL; i++) {
        int x = baseX + cos(yaw)*(i+1)*offs;
        int y = baseY + sin(yaw)*(i+1)*offs;

        SpawnForced(getAssistItemActor(i), x, y, baseZ, utid, 0);
        GiveActorInventory(utid, "ChangeFlagDropped0", 1);
        Thing_ChangeTID(utid, 0);
    }
}

script "UIX_WeapBar" (int cam, int cpn, int cv)
{
    if(!GetCvar("UIX_SV_WEAPBAR"))
        terminate;

    if(GetUserCvar(cpn, "UIX_CL_WEAPBARALPHA") == 0.0)
        terminate;

    if(CheckActorInventory(cam, "UIX_NoWeaponBar") > 0)
        terminate;

    bool mirrored = GetUserCvar(cpn, "UIX_CL_WEAPBARMIRROR");
    bool horizontal = GetUserCvar(cpn, "UIX_CL_WEAPBARDIR");
    int userAlpha = GetUserCvar(cpn, "UIX_CL_WEAPBARALPHA");
    bool drawSlot = GetUserCvar(cpn, "UIX_CL_WEAPBARSHOWSLOTS");
    int barWidth, barHeight;
    
    SetActivator(cam);
    int pln = PlayerNumber();
    if(pln == -1)
        terminate;

    str curWeap = GetWeapon();

    SetActivator(-1);

    int scaleX = GetUserCvar(cpn, "UIX_CL_WEAPBARSCALE"); // 2.5;
    int scaleY = scaleX;

    int slotCounts[10];
    int slotDrawn[10];

    int xStart = GetUserCvar(cpn, "UIX_CL_WEAPBAROFFSX"); // 500;
    int yStart = -GetUserCvar(cpn, "UIX_CL_WEAPBAROFFSY"); // 500;

    str barFontCyan, barFontBlue, barFontEmpt, bart, barb;

    if(!horizontal) {
        barFontCyan = "UIXWVC";
        barFontBlue = "UIXWVB";
        barFontEmpt = "UIXVHEMP";
        bart = STR_WEP_V;
        barb = STR_WEP_V2;
        barWidth = WEPBAR_BAR_WIDTH * 10;
        barHeight = WEPBAR_ICON_WIDTH * 10;
    } else {
        barFontCyan = "UIXWHC";
        barFontBlue = "UIXWHB";
        barFontEmpt = "UIXWHEMP";
        bart = STR_WEP_H;
        barb = STR_WEP_H2;
        barWidth = WEPBAR_ICON_WIDTH * 10;
        barHeight = WEPBAR_BAR_WIDTH * 10;
    }

    int icWep, alpha;

    // if(getUserCvar(cpn, );

    for(int fakeId = 0; fakeId < MAX_BUSTERUPGRADES + MAX_WEAPONS_GLOBAL; fakeId++) {
        
        int i;
        bool isBuster;
        if(fakeId < MAX_BUSTERUPGRADES) {
            i = fakeId;
            isBuster = true;
        } else {
            i = fakeId - MAX_BUSTERUPGRADES;
            isBuster = false;
        }

        if(isBuster)
            icWep = getBusterActor(i);
        else
            icWep = getWeaponActor(i);
        
        if(CheckActorInventory(cam, icWep)) {

                str ico, amo1, amo2, amo1blue, amo1cyan, amo2blue, amo2cyan;
                int amt1, amt2, amx1, amx2, slot;

                int icox, icoy, bar1x, bar1y, bar2x, bar2y, slotx, sloty;

                stageWeaponData(i, icWep, isBuster, cam);

                if(isBuster) {
                    ico = getBusterIcon(i);
                    amo1 = bustBarData[i][BARDATA_AMMOTYPE1];
                    amo2 = bustBarData[i][BARDATA_AMMOTYPE2];
                    slot = bustBarData[i][BARDATA_SLOT];
                    amo1cyan = bustBarData[i][BARDATA_CYAN1];
                    amo1blue = bustBarData[i][BARDATA_BLUE1];
                    amo2cyan = bustBarData[i][BARDATA_CYAN2];
                    amo2blue = bustBarData[i][BARDATA_BLUE2];
                } else {
                    ico = getWeaponIcon(i);
                    amo1 = wepBarData[i][BARDATA_AMMOTYPE1];
                    amo2 = wepBarData[i][BARDATA_AMMOTYPE2];
                    slot = wepBarData[i][BARDATA_SLOT];
                    amo1cyan = wepBarData[i][BARDATA_CYAN1];
                    amo1blue = wepBarData[i][BARDATA_BLUE1];
                    amo2cyan = wepBarData[i][BARDATA_CYAN2];
                    amo2blue = wepBarData[i][BARDATA_BLUE2];
                }

                if(StrLen(amo1) > 0) {
                    amt1 = CheckActorInventory(cam, amo1);
                    amx1 = getPlayerAmmoCapacity(cpn, amo1);
                } else {
                    amt1 = 0;
                    amx1 = 0;
                }

                if(StrLen(amo2) > 0) {
                    amt2 = CheckActorInventory(cam, amo2);
                    amx2 = getPlayerAmmoCapacity(cpn, amo2);
                } else {
                    amt2 = 0;
                    amx2 = 0;
                }

                str slotKey = -1;
                int count = slotCounts[slot];
                int slotPos = slot;
                if(slotPos == 0) {
                    slotPos = 9;
                } else {
                    slotPos--;
                }

                str slotCol = "\cq";

                if(StrMatches(curWeap, icWep)) {
                    if(!horizontal) {
                        if(!mirrored) {
                            icox = xStart - FixedMul(WEPBAR_X_OFFS/2 + WEPBAR_X_OFFS, scaleX);
                            icoy = yStart + FixedMul(WEPBAR_Y_OFFS, scaleY) * slotPos;
                        } else {
                            icox = xStart + FixedMul(WEPBAR_X_OFFS/2 + WEPBAR_X_OFFS, scaleX);
                            icoy = yStart + FixedMul(WEPBAR_Y_OFFS, scaleY) * slotPos;
                        }
                    } else {
                        if(!mirrored) {
                            icox = xStart + FixedMul(WEPBAR_Y_OFFS, scaleX) * slotPos;
                            icoy = yStart + FixedMul(WEPBAR_X_OFFS/2 + WEPBAR_X_OFFS, scaleY);
                        } else {
                            icox = xStart + FixedMul(WEPBAR_Y_OFFS, scaleX) * slotPos;
                            icoy = yStart - FixedMul(WEPBAR_X_OFFS/2 + WEPBAR_X_OFFS, scaleY);
                        }
                    }
                    alpha = FixedMul(1.0, userAlpha);

                    // hard override, even if the slot is drawn, it needs to be redrawn
                    slotDrawn[slot] = false;
                    slotCol = "\cf";
                } else {
                    if(!horizontal) {
                        if(!mirrored) {
                            icox = xStart + FixedMul(WEPBAR_X_OFFS, scaleX) * count;
                            icoy = yStart + FixedMul(WEPBAR_Y_OFFS, scaleY) * slotPos + FixedMul(slotCounts[slot], scaleY);
                        } else {
                            icox = xStart - FixedMul(WEPBAR_X_OFFS, scaleX) * count;
                            icoy = yStart + FixedMul(WEPBAR_Y_OFFS, scaleY) * slotPos + FixedMul(slotCounts[slot], scaleY);
                        }
                    } else {
                        if(!mirrored) {
                            icox = xStart + FixedMul(WEPBAR_Y_OFFS, scaleX) * slotPos + FixedMul(slotCounts[slot], scaleX);
                            icoy = yStart - FixedMul(WEPBAR_X_OFFS, scaleY) * count;
                        } else {
                            icox = xStart + FixedMul(WEPBAR_Y_OFFS, scaleX) * slotPos + FixedMul(slotCounts[slot], scaleX);
                            icoy = yStart + FixedMul(WEPBAR_X_OFFS, scaleY) * count;
                        }
                    }
                    alpha = FixedMul(0.5, userAlpha);

                    slotCounts[slot]++;
                }

                if(!horizontal) {
                    if(!mirrored) {
                        bar1x = icox;
                        bar1y = icoy - FixedMul(WEPBAR_ICON_WIDTH + WEPBAR_ICON_WIDTH/2, scaleY);
                        bar2x = bar1x + FixedMul(WEPBAR_BAR_WIDTH, scaleY);
                        bar2y = bar1y;
                        slotx = xStart - FixedMul(3 * WEPBAR_X_OFFS, scaleX);
                        sloty = icoy - FixedMul(WEPBAR_X_OFFS+4, scaleY);
                    } else {
                        bar1x = icox - FixedMul(WEPBAR_X_OFFS + WEPBAR_BAR_WIDTH, ScaleX);
                        bar1y = icoy - FixedMul(WEPBAR_Y_OFFS, scaleY);
                        bar2x = bar1x - FixedMul(WEPBAR_BAR_WIDTH, ScaleX);
                        bar2y = icoy - FixedMul(WEPBAR_Y_OFFS, scaleY);
                        slotx = xStart + FixedMul(2 * WEPBAR_X_OFFS, scaleX);
                        sloty = icoy - FixedMul(WEPBAR_X_OFFS+4, scaleY);
                    }
                } else {
                    if(!mirrored) {
                        bar1x = icox - FixedMul(WEPBAR_ICON_WIDTH, scaleX);
                        bar1y = icoy - FixedMul(WEPBAR_Y_OFFS + WEPBAR_BAR_WIDTH, scaleX);
                        bar2x = bar1x;
                        bar2y = bar1y - FixedMul(WEPBAR_BAR_WIDTH, ScaleY);
                        slotx = icox - FixedMul(WEPBAR_X_OFFS >> 1, scaleX);
                        sloty = yStart + FixedMul(WEPBAR_Y_OFFS, scaleY);
                    } else {
                        bar1x = icox - FixedMul(WEPBAR_ICON_WIDTH, scaleX);
                        bar1y = icoy - FixedMul(WEPBAR_BAR_WIDTH*2, scaleY);
                        bar2x = bar1x;
                        bar2y = bar1y + FixedMul(WEPBAR_BAR_WIDTH, ScaleY);
                        slotx = icox - FixedMul(WEPBAR_X_OFFS >> 1, scaleX);
                        sloty = yStart - FixedMul(4 * WEPBAR_ICON_WIDTH - WEPBAR_BAR_WIDTH, scaleY);
                    }
                }

                displayIcon(ico, getNewUIId(), icox, icoy, scaleX, scaleY, alpha);
                displayIcon("UXICA0", getNewUIId(), icox, icoy, scaleX, scaleY, userAlpha);

                // format: UXWFT#XX

                if(amx1) {
                    drawLayeredBar(StrParam(s:barFontCyan, s:amo1cyan), StrParam(s:barFontBlue, s:amo1blue), barFontEmpt, bar1X, bar1Y, barWidth, barHeight, FixedMul(scaleX, 0.1), FixedMul(scaleY, 0.1), userAlpha, amt1, amx1, horizontal+1, false, getNewUIId(), getNewUIId(), getNewUIId());
                }

                if(amx2) {
                    drawLayeredBar(StrParam(s:barFontCyan, s:amo2cyan), StrParam(s:barFontBlue, s:amo2blue), barFontEmpt, bar2X, bar2Y, barWidth, barHeight, FixedMul(scaleX, 0.1), FixedMul(scaleY, 0.1), userAlpha, amt2, amx2, horizontal+1, false, getNewUIId(), getNewUIId(), getNewUIId());
                }

                if(drawSlot && !slotDrawn[slot]) {
                    slotDrawn[slot] = true;
                    slotKey = StrParam(s:slotCol, k:StrParam(s:"slot ", i:slot));
                    SetFont("SMALLFONT");
                    if(!horizontal) {
                        if(!mirrored) {
                            displayMessageR(slotKey, getNewUIId(), slotx, sloty, scaleX, scaleY, userAlpha);
                        } else {
                            displayMessageL(slotKey, getNewUIId(), slotx, sloty, scaleX, scaleY, userAlpha);
                        }
                    } else {
                        displayMessage(slotKey, getNewUIId(), slotx, sloty, scaleX, scaleY, userAlpha, 0, 0);
                    }
                }
        }
    }
}

function void stageWeaponData(int idx, str weap, int isBuster, int cam) {
    int blue1, cyan1, blue2, cyan2, obj, weapIdx;

    if(isBuster) {
        weapIdx = findWeaponByActor(weap);
        if(bustBarData[idx][BARDATA_CHECKED])
            return;
        bustBarData[idx][BARDATA_CHECKED] = true;
        drawBusters[buster_count++] = weap;

        bool escape = false;

        if(!escape)
            escape = (weapIdx == -1);
        if(!escape)
            escape = (StrCmp("", getWeaponAmmoType(weapIdx)) == 0);

        if(escape) { // early escape if there's no ammo here
            bustBarData[idx][BARDATA_CYAN1] = "";
            bustBarData[idx][BARDATA_BLUE1] = "";
            bustBarData[idx][BARDATA_CYAN2] = "";
            bustBarData[idx][BARDATA_BLUE2] = "";
            bustBarData[idx][BARDATA_AMMOTYPE1] = "";
            bustBarData[idx][BARDATA_AMMOTYPE2] = "";
            bustBarData[idx][BARDATA_SLOT] = 1;
            return;
        }
    } else {
        if(wepBarData[idx][BARDATA_CHECKED])
            return;
        wepBarData[idx][BARDATA_CHECKED] = true;
    }

    obj = new(StrParam(s:weap, s:"_NormalBar"));
    if(obj) {
        cyan1 = Dec2Hex(GetActorArg(obj, 0), 2);
        blue1 = Dec2Hex(GetActorArg(obj, 1), 2);
        destroy(obj);
    } else { // ScriptBar attempted contingencies
        obj = new(StrParam(s:weap, s:"_MugshotColor"));

        if(obj) {
            cyan1 = Dec2Hex(GetActorArg(obj, 0), 2);
            blue1 = Dec2Hex(GetActorArg(obj, 1), 2);
        } else { // ScriptBar final contingency
            obj = new(StrParam(s:weap, s:"_ScriptBar"));

            if(obj) {
                // this feels like danger tbh
                SetActivator(cam);
                CallACS0(StrParam(s:"DrawBar_", s:weap));
                bool success = false;
                if(!success) {
                    cyan1 = CheckInventory("SBARCyan")-1;
                    blue1 = CheckInventory("SBARBlue")-1;
                    cyan2 = CheckInventory("SBARCyan2")-1;
                    blue2 = CheckInventory("SBARBlue2")-1;
                    success = (cyan1 != -1 && blue1 != -1);
                }

                if(!success) {
                    cyan1 = CheckInventory("SBARMugshotCyan")-1;
                    blue1 = CheckInventory("SBARMugshotBlue")-1;
                    success = (cyan1 != -1 && blue1 != -1);
                }

                if(!success) { // :RussOof:
                    cyan1 = Dec2Hex(192, 2);
                    blue1 = Dec2Hex(198, 2);
                } else {
                    cyan1 = Dec2Hex(cyan1, 2);
                    blue1 = Dec2Hex(blue1, 2);
                }

                if(cyan2 == -1 || blue2 == -1) {
                    cyan2 = 0;
                    blue2 = 0;
                } else {
                    cyan2 = Dec2Hex(cyan2, 2);
                    blue2 = Dec2Hex(blue2, 2);
                }

                SetActivator(-1);
                CallACS1("core_DrawBar_Clear", cam);
                destroy(obj);
            } else {
                cyan1 = Dec2Hex(192, 2);
                blue1 = Dec2Hex(198, 2);
            }
            destroy(obj);
        }
        destroy(obj);
    }

    obj = new(StrParam(s:weap, s:"_SecondBar"));

    if(obj) {
        cyan2 = Dec2Hex(GetActorArg(obj, 0), 2);
        blue2 = Dec2Hex(GetActorArg(obj, 1), 2);
        destroy(obj);
    } else { // use the base color for secondbar if secondbar doesn't exist
        if(cyan2 == 0) cyan2 = cyan1;
        if(blue2 == 0) blue2 = blue1;
    }
        
    if(isBuster) {
        bustBarData[idx][BARDATA_CYAN1] = cyan1;
        bustBarData[idx][BARDATA_BLUE1] = blue1;
        bustBarData[idx][BARDATA_CYAN2] = cyan2;
        bustBarData[idx][BARDATA_BLUE2] = blue2;
        bustBarData[idx][BARDATA_AMMOTYPE1] = getWeaponAmmoType(weapIdx);
        bustBarData[idx][BARDATA_AMMOTYPE2] = getWeaponAmmo2Type(weapIdx);
        bustBarData[idx][BARDATA_SLOT] = getWeaponSlot(weapIdx);
    } else {
        wepBarData[idx][BARDATA_CYAN1] = cyan1;
        wepBarData[idx][BARDATA_BLUE1] = blue1;
        wepBarData[idx][BARDATA_CYAN2] = cyan2;
        wepBarData[idx][BARDATA_BLUE2] = blue2;
        wepBarData[idx][BARDATA_AMMOTYPE1] = getWeaponAmmoType(idx);
        wepBarData[idx][BARDATA_AMMOTYPE2] = getWeaponAmmo2Type(idx);
        wepBarData[idx][BARDATA_SLOT] = getWeaponSlot(idx);
    }
}

function bool isBusterDrawn(str which) {
    for(int i = 0; i < buster_count; i++) {
        if(StrMatches(which, drawBusters[i]))
            return true;
    }
    return false;
}
