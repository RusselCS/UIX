#library "UIXMSG"

#include "zcommon.acs"

#include "SHRTFUNC.acs"

int plrFrags[64];

int lastFrag[64];
int lastDeath[64];

int infiniteRespawns;

script "UITweaks_FragIcon" OPEN CLIENTSIDE
{
    infiniteRespawns = !(GetCvar("lastmanstanding") || GetCvar("teamlms"));
}

script "UITweaks_FragCheck" DEATH CLIENTSIDE
{
    delay(1);

    int vpln = PlayerNumber();
    lastDeath[vpln] = timer();

    if(GetGamemodeState() != GAMESTATE_INPROGRESS)
        terminate;

    int vfrags = PlayerFrags();
    SetActivatorToTarget(0);
    int apln = PlayerNumber();

    if(apln == -1) { // world killed me
        plrFrags[vpln] = vfrags;
        terminate;
    }
    
    int oFrags = plrFrags[apln];
    int nFrags = PlayerFrags();

    if(nFrags == ofrags) { // not a frag, somehow
        terminate;
    }

    lastFrag[apln] = timer();

    ACS_NamedExecuteWithResult("UITweaks_FragMugshot", vpln);
    SetActivatorToPlayer(vpln);
    ACS_NamedExecuteWithResult("UITweaks_FragMugshot", apln, true);
}

// Mugshot data pull, from pingbutton
function str getMugshotGraphicFromTID(int tid) {
	str class = GetActorClass(tid);

	int u = UniqueTID();
	if(!SpawnForced(StrParam(s:"PBMug_", s:class), 0, 0, 0, u, 0)) {
		return "";
	}
	Thing_Remove(u);

	return ACS_NamedExecuteWithResult(StrParam(s:"PBMug_", s:class), tid);
}

#define FRAGMSG_TIME 87
#define FRAGMSG_FADETIME 18

#define FRAGMSG_MUG_SCALE 9.0

#define FRAGMSG_MUG_SIZERANGE 100

#define FRAGMSG_ITERATION 8

#define FRAGMSG_EXPLODE 40
#define FRAGMSG_EXPLODEFRAMES 20

#define FRAGMSG_RESPAWNFRAMES 4

str explodeFrames[FRAGMSG_EXPLODEFRAMES] = {
    "MXP2A0","MXP2B0","MXP2C0","MXP2D0","MXP2E0",
    "MXP2F0","MXP2G0","MXP2H0","MXP2I0","MXP2J0",
    "MXP2K0","MXP2L0","MXP2M0","MXP2N0","MXP2O0",
    "MXP2P0","MXP2Q0","MXP2R0","MXP2S0","MXP2T0",
};

str respawnFrames[FRAGMSG_RESPAWNFRAMES] = {
    "UXMGSKIA",
    "UXMGSKIB",
    "UXMGSKIC",
    "UXMGSKID",
};

str skullIcons[2][256] = {
    { // cyan
        "UIXSKC00","UIXSKC01","UIXSKC02","UIXSKC03","UIXSKC04","UIXSKC05","UIXSKC06","UIXSKC07","UIXSKC08","UIXSKC09","UIXSKC0A","UIXSKC0B","UIXSKC0C","UIXSKC0D","UIXSKC0E","UIXSKC0F",
        "UIXSKC10","UIXSKC11","UIXSKC12","UIXSKC13","UIXSKC14","UIXSKC15","UIXSKC16","UIXSKC17","UIXSKC18","UIXSKC19","UIXSKC1A","UIXSKC1B","UIXSKC1C","UIXSKC1D","UIXSKC1E","UIXSKC1F",
        "UIXSKC20","UIXSKC21","UIXSKC22","UIXSKC23","UIXSKC24","UIXSKC25","UIXSKC26","UIXSKC27","UIXSKC28","UIXSKC29","UIXSKC2A","UIXSKC2B","UIXSKC2C","UIXSKC2D","UIXSKC2E","UIXSKC2F",
        "UIXSKC30","UIXSKC31","UIXSKC32","UIXSKC33","UIXSKC34","UIXSKC35","UIXSKC36","UIXSKC37","UIXSKC38","UIXSKC39","UIXSKC3A","UIXSKC3B","UIXSKC3C","UIXSKC3D","UIXSKC3E","UIXSKC3F",
        "UIXSKC40","UIXSKC41","UIXSKC42","UIXSKC43","UIXSKC44","UIXSKC45","UIXSKC46","UIXSKC47","UIXSKC48","UIXSKC49","UIXSKC4A","UIXSKC4B","UIXSKC4C","UIXSKC4D","UIXSKC4E","UIXSKC4F",
        "UIXSKC50","UIXSKC51","UIXSKC52","UIXSKC53","UIXSKC54","UIXSKC55","UIXSKC56","UIXSKC57","UIXSKC58","UIXSKC59","UIXSKC5A","UIXSKC5B","UIXSKC5C","UIXSKC5D","UIXSKC5E","UIXSKC5F",
        "UIXSKC60","UIXSKC61","UIXSKC62","UIXSKC63","UIXSKC64","UIXSKC65","UIXSKC66","UIXSKC67","UIXSKC68","UIXSKC69","UIXSKC6A","UIXSKC6B","UIXSKC6C","UIXSKC6D","UIXSKC6E","UIXSKC6F",
        "UIXSKC70","UIXSKC71","UIXSKC72","UIXSKC73","UIXSKC74","UIXSKC75","UIXSKC76","UIXSKC77","UIXSKC78","UIXSKC79","UIXSKC7A","UIXSKC7B","UIXSKC7C","UIXSKC7D","UIXSKC7E","UIXSKC7F",
        "UIXSKC80","UIXSKC81","UIXSKC82","UIXSKC83","UIXSKC84","UIXSKC85","UIXSKC86","UIXSKC87","UIXSKC88","UIXSKC89","UIXSKC8A","UIXSKC8B","UIXSKC8C","UIXSKC8D","UIXSKC8E","UIXSKC8F",
        "UIXSKC90","UIXSKC91","UIXSKC92","UIXSKC93","UIXSKC94","UIXSKC95","UIXSKC96","UIXSKC97","UIXSKC98","UIXSKC99","UIXSKC9A","UIXSKC9B","UIXSKC9C","UIXSKC9D","UIXSKC9E","UIXSKC9F",
        "UIXSKCA0","UIXSKCA1","UIXSKCA2","UIXSKCA3","UIXSKCA4","UIXSKCA5","UIXSKCA6","UIXSKCA7","UIXSKCA8","UIXSKCA9","UIXSKCAA","UIXSKCAB","UIXSKCAC","UIXSKCAD","UIXSKCAE","UIXSKCAF",
        "UIXSKCB0","UIXSKCB1","UIXSKCB2","UIXSKCB3","UIXSKCB4","UIXSKCB5","UIXSKCB6","UIXSKCB7","UIXSKCB8","UIXSKCB9","UIXSKCBA","UIXSKCBB","UIXSKCBC","UIXSKCBD","UIXSKCBE","UIXSKCBF",
        "UIXSKCC0","UIXSKCC1","UIXSKCC2","UIXSKCC3","UIXSKCC4","UIXSKCC5","UIXSKCC6","UIXSKCC7","UIXSKCC8","UIXSKCC9","UIXSKCCA","UIXSKCCB","UIXSKCCC","UIXSKCCD","UIXSKCCE","UIXSKCCF",
        "UIXSKCD0","UIXSKCD1","UIXSKCD2","UIXSKCD3","UIXSKCD4","UIXSKCD5","UIXSKCD6","UIXSKCD7","UIXSKCD8","UIXSKCD9","UIXSKCDA","UIXSKCDB","UIXSKCDC","UIXSKCDD","UIXSKCDE","UIXSKCDF",
        "UIXSKCE0","UIXSKCE1","UIXSKCE2","UIXSKCE3","UIXSKCE4","UIXSKCE5","UIXSKCE6","UIXSKCE7","UIXSKCE8","UIXSKCE9","UIXSKCEA","UIXSKCEB","UIXSKCEC","UIXSKCED","UIXSKCEE","UIXSKCEF",
        "UIXSKCF0","UIXSKCF1","UIXSKCF2","UIXSKCF3","UIXSKCF4","UIXSKCF5","UIXSKCF6","UIXSKCF7","UIXSKCF8","UIXSKCF9","UIXSKCFA","UIXSKCFB","UIXSKCFC","UIXSKCFD","UIXSKCFE","UIXSKCFF",
    },
    { // blue
        "UIXSKB00","UIXSKB01","UIXSKB02","UIXSKB03","UIXSKB04","UIXSKB05","UIXSKB06","UIXSKB07","UIXSKB08","UIXSKB09","UIXSKB0A","UIXSKB0B","UIXSKB0C","UIXSKB0D","UIXSKB0E","UIXSKB0F",
        "UIXSKB10","UIXSKB11","UIXSKB12","UIXSKB13","UIXSKB14","UIXSKB15","UIXSKB16","UIXSKB17","UIXSKB18","UIXSKB19","UIXSKB1A","UIXSKB1B","UIXSKB1C","UIXSKB1D","UIXSKB1E","UIXSKB1F",
        "UIXSKB20","UIXSKB21","UIXSKB22","UIXSKB23","UIXSKB24","UIXSKB25","UIXSKB26","UIXSKB27","UIXSKB28","UIXSKB29","UIXSKB2A","UIXSKB2B","UIXSKB2C","UIXSKB2D","UIXSKB2E","UIXSKB2F",
        "UIXSKB30","UIXSKB31","UIXSKB32","UIXSKB33","UIXSKB34","UIXSKB35","UIXSKB36","UIXSKB37","UIXSKB38","UIXSKB39","UIXSKB3A","UIXSKB3B","UIXSKB3C","UIXSKB3D","UIXSKB3E","UIXSKB3F",
        "UIXSKB40","UIXSKB41","UIXSKB42","UIXSKB43","UIXSKB44","UIXSKB45","UIXSKB46","UIXSKB47","UIXSKB48","UIXSKB49","UIXSKB4A","UIXSKB4B","UIXSKB4C","UIXSKB4D","UIXSKB4E","UIXSKB4F",
        "UIXSKB50","UIXSKB51","UIXSKB52","UIXSKB53","UIXSKB54","UIXSKB55","UIXSKB56","UIXSKB57","UIXSKB58","UIXSKB59","UIXSKB5A","UIXSKB5B","UIXSKB5C","UIXSKB5D","UIXSKB5E","UIXSKB5F",
        "UIXSKB60","UIXSKB61","UIXSKB62","UIXSKB63","UIXSKB64","UIXSKB65","UIXSKB66","UIXSKB67","UIXSKB68","UIXSKB69","UIXSKB6A","UIXSKB6B","UIXSKB6C","UIXSKB6D","UIXSKB6E","UIXSKB6F",
        "UIXSKB70","UIXSKB71","UIXSKB72","UIXSKB73","UIXSKB74","UIXSKB75","UIXSKB76","UIXSKB77","UIXSKB78","UIXSKB79","UIXSKB7A","UIXSKB7B","UIXSKB7C","UIXSKB7D","UIXSKB7E","UIXSKB7F",
        "UIXSKB80","UIXSKB81","UIXSKB82","UIXSKB83","UIXSKB84","UIXSKB85","UIXSKB86","UIXSKB87","UIXSKB88","UIXSKB89","UIXSKB8A","UIXSKB8B","UIXSKB8C","UIXSKB8D","UIXSKB8E","UIXSKB8F",
        "UIXSKB90","UIXSKB91","UIXSKB92","UIXSKB93","UIXSKB94","UIXSKB95","UIXSKB96","UIXSKB97","UIXSKB98","UIXSKB99","UIXSKB9A","UIXSKB9B","UIXSKB9C","UIXSKB9D","UIXSKB9E","UIXSKB9F",
        "UIXSKBA0","UIXSKBA1","UIXSKBA2","UIXSKBA3","UIXSKBA4","UIXSKBA5","UIXSKBA6","UIXSKBA7","UIXSKBA8","UIXSKBA9","UIXSKBAA","UIXSKBAB","UIXSKBAC","UIXSKBAD","UIXSKBAE","UIXSKBAF",
        "UIXSKBB0","UIXSKBB1","UIXSKBB2","UIXSKBB3","UIXSKBB4","UIXSKBB5","UIXSKBB6","UIXSKBB7","UIXSKBB8","UIXSKBB9","UIXSKBBA","UIXSKBBB","UIXSKBBC","UIXSKBBD","UIXSKBBE","UIXSKBBF",
        "UIXSKBC0","UIXSKBC1","UIXSKBC2","UIXSKBC3","UIXSKBC4","UIXSKBC5","UIXSKBC6","UIXSKBC7","UIXSKBC8","UIXSKBC9","UIXSKBCA","UIXSKBCB","UIXSKBCC","UIXSKBCD","UIXSKBCE","UIXSKBCF",
        "UIXSKBD0","UIXSKBD1","UIXSKBD2","UIXSKBD3","UIXSKBD4","UIXSKBD5","UIXSKBD6","UIXSKBD7","UIXSKBD8","UIXSKBD9","UIXSKBDA","UIXSKBDB","UIXSKBDC","UIXSKBDD","UIXSKBDE","UIXSKBDF",
        "UIXSKBE0","UIXSKBE1","UIXSKBE2","UIXSKBE3","UIXSKBE4","UIXSKBE5","UIXSKBE6","UIXSKBE7","UIXSKBE8","UIXSKBE9","UIXSKBEA","UIXSKBEB","UIXSKBEC","UIXSKBED","UIXSKBEE","UIXSKBEF",
        "UIXSKBF0","UIXSKBF1","UIXSKBF2","UIXSKBF3","UIXSKBF4","UIXSKBF5","UIXSKBF6","UIXSKBF7","UIXSKBF8","UIXSKBF9","UIXSKBFA","UIXSKBFB","UIXSKBFC","UIXSKBFD","UIXSKBFE","UIXSKBFF",
    },
};

script "UITweaks_FragMugshot" (int other, int fragged) CLIENTSIDE
{
    str mug = getMugshotGraphicFromTid(other + PLN_TID_SHRT);

    if(strLen(mug) == 0)
        terminate;

    int pln = PlayerNumber();

    int fragTime = lastFrag[pln];
    int deathTime = lastDeath[pln];

    int startTime = timer();
    int endTime = startTime + FRAGMSG_TIME + FRAGMSG_FADETIME;

    int destScale = FRAGMSG_MUG_SCALE;
    int destAlpha = 1.0;
    int destX = 0;
    int destY = -230;

    int scale = FRAGMSG_MUG_SCALE;
    int alpha = 0.0;
    int x = 0;
    int y = destY + (fragged ? -FRAGMSG_MUG_SIZERANGE : FRAGMSG_MUG_SIZERANGE);

    int scaleIter = (destScale - scale) / FRAGMSG_ITERATION;
    int alphaIter = (destAlpha - alpha) / FRAGMSG_ITERATION;
    int xiter = (destX - x) / FRAGMSG_ITERATION;
    int yiter = (destY - y) / FRAGMSG_ITERATION;

    int multiFragX = -100;
    int multiFragY = 16;

    int update = 0;

    int canRespawn = getPlayerLivesLeft(other) > 0;

    int team = GetPlayerInfo(other, PLAYERINFO_TEAM);
    int cyan, blue;

    if(team == 255) {
        cyan = 4;
        blue = 200;
    } else {
        cyan = ACS_NamedExecuteWithResult("core_getteampalette", team, 0);
        blue = ACS_NamedExecuteWithResult("core_getteampalette", team, 1);
    }

    do
    {
        if(GetGamemodeState() != GAMESTATE_INPROGRESS)
            terminate;

        if(deathTime != lastDeath[pln])
            terminate;

        if(timer() > endTime)
            terminate;
        
        // update
        if(fragTime != lastFrag[pln]) {
            update++;
            fragTime = lastFrag[pln];
            endTime = fragTime + FRAGMSG_TIME + FRAGMSG_FADETIME;

            destScale /= 2;
            destAlpha = 1.0;
            destX += multiFragX;
            multiFragX /= 2;
            destY += FixedDiv(multiFragY, destScale);
            multiFragY -= FixedDiv(multiFragY, destScale);

            scaleIter = (destScale - scale) / FRAGMSG_ITERATION;
            alphaIter = (destAlpha - alpha) / FRAGMSG_ITERATION;
            xiter = (destX - x) / FRAGMSG_ITERATION;
            yiter = (destY - y) / FRAGMSG_ITERATION;
        }

        if(timer() == endTime-FRAGMSG_FADETIME) {
            destAlpha = 0.0;
            alphaIter = (destAlpha - alpha) / FRAGMSG_FADETIME;
        }

        scale = bound(scale + scaleIter, destScale, scaleIter);
        alpha = bound(alpha + alphaIter, destAlpha, alphaIter);
        x = bound(x + xIter, destX, xIter);
        y = bound(y + yIter, destY, yIter);

        if(scale <= 0 || alpha <= 0) {
            terminate;
        }

        if(!fragged) {
            if(infiniteRespawns) {
                displayIcon(respawnFrames[FRAGMSG_RESPAWNFRAMES-1], getNewUIId(), x, y, scale, scale, alpha);
            } else {
                if(timer() >= startTime + FRAGMSG_EXPLODE) {
                
                    int explodeFrame = timer() - (startTime + FRAGMSG_EXPLODE);
                    if(!canRespawn) {
                        if(explodeFrame < FRAGMSG_EXPLODEFRAMES) {
                            int explodeScale = FixedMul(scale, 0.25);
                            int explodeOffs = FixedMul(explodeScale, 30);
                            displayIcon(explodeFrames[explodeFrame], getNewUIId(), x+explodeOffs, y+explodeOffs, explodeScale, explodeScale, alpha);
                        }
                        displayIcon(skullIcons[0][cyan], getNewUIId(), x, y, scale, scale, alpha);
                        displayIcon(skullIcons[1][blue], getNewUIId(), x, y, scale, scale, alpha);
                        displayIcon("UIXMGSCR", getNewUIId(), x, y, scale, scale, FixedMul(alpha, 0.5));
                    } else {
                        displayIcon(respawnFrames[min(explodeFrame, FRAGMSG_RESPAWNFRAMES-1)], getNewUIId(), x, y, scale, scale, alpha);
                    }
                }
            }
            displayIcon(skullIcons[0][cyan], getNewUIId(), x, y, scale, scale, alpha);
            displayIcon(skullIcons[1][blue], getNewUIId(), x, y, scale, scale, alpha);
        }

        displayIcon(mug, getNewUIId(), x, y, scale, scale, alpha);

        delay(1);
    }
    while(true);
}

function int lerp(int a, int b, int alpha)
{
    return FixedMul(a, 1.0 - alpha) + FixedMul(b, alpha);
}

function int bound(int n, int cap, int sign)
{
    return sign < 0 ? max(n, cap) : min(n, cap);
}
