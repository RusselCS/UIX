#library "UIXMSG"

#include "zcommon.acs"

#include "SHRTFUNC.acs"

#include "UXTBICNS.acs"

int plrFrags[MAX_PLAYERS_SHRT];

int lastFrag[MAX_PLAYERS_SHRT];
int lastDeath[MAX_PLAYERS_SHRT];

int infiniteRespawns;

script "UITweaks_FragIcon" OPEN CLIENTSIDE
{
    infiniteRespawns = !(GetCvar("lastmanstanding") || GetCvar("teamlms"));
}

script "UIX_KillfeedDispatch" DEATH CLIENTSIDE
{
    delay(1);

    if(!GetCVar("UIX_SV_DRAWKILLFEED"))
        terminate;
    if(!GetUserCvar(ConsolePlayerNumber(), "UIX_CL_DRAWKILLFEED"))
        terminate;
    if(GetGamemodeState() != GAMESTATE_INPROGRESS)
        terminate;

    int vpln = PlayerNumber();
    lastDeath[vpln] = timer();
    int vfrags = PlayerFrags();
    SetActivatorToTarget(0);
    int apln = PlayerNumber();

    if(vpln == apln || apln == -1) { // world killed me
        plrFrags[vpln] = vfrags;
        terminate;
    }
    
    int oFrags = plrFrags[apln];
    int nFrags = PlayerFrags();

    if(nFrags == ofrags) { // not a frag, somehow
        terminate;
    }

    lastFrag[apln] = timer();

    resetActivator();

    int cam = getCameraPln(ConsolePlayerNumber());

    if(cam == apln)
        CallACS3("UIX_Killfeed", cam, vpln, false);

    if(cam == vpln)
        CallACS3("UIX_Killfeed", cam, apln, true);
}

function int getCameraPln(int pln) { return CallACS1("uix_cameraplayernumber", pln); }

script "uix_cameraplayernumber" (int pln)
{
    SetActivatorToPlayer(pln);
    SetActivator(0, AAPTR_PLAYER_GETCAMERA);
    SetResultValue(PlayerNumber());
}

// Mugshot data pull, from pingbutton
function str getMugshotGraphicFromTID(int tid) {
	str class = GetActorClass(tid);

	int u = UniqueTID();
	if(!SpawnForced(StrParam(s:"PBMug_", s:class), 0, 0, 0, u, 0)) {
		return "";
	}
	Thing_Remove(u);

	return ACS_NamedExecuteWithResult(StrParam(s:"PBMug_", s:class), tid);
}

#define FRAGMSG_TIME 87
#define FRAGMSG_FADETIME 18

#define FRAGMSG_MUG_SCALE 9.0

#define FRAGMSG_MUG_SIZERANGE 100

#define FRAGMSG_ITERATION 8

#define FRAGMSG_EXPLODE 40

script "UIT_FREEZEBOTS" (void)
{
    for(int i = 0; i < ServerMAX; i++) {
        if(!PlayerInGame(i))
            continue;
        if(PlayerIsBot(i)) {
            SetActivatorToPlayer(i);
            SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
        }
    }
}

script "UIX_Killfeed" (int cam, int who, int dead) CLIENTSIDE
{
    str mug = getMugshotGraphicFromTid(who + PLN_TID_SHRT);

    if(strLen(mug) == 0)
        terminate;

    int pln = cam;

    int fragTime = lastFrag[pln];
    int deathTime = lastDeath[pln];

    int startTime = timer();
    int endTime = startTime + FRAGMSG_TIME + FRAGMSG_FADETIME;

    int destScale = FRAGMSG_MUG_SCALE;
    int destAlpha = 1.0;
    int destX = 0;
    int destY = -230;

    int scale = FRAGMSG_MUG_SCALE;
    int alpha = 0.0;
    int x = 0;
    int y = destY + (dead ? -FRAGMSG_MUG_SIZERANGE : FRAGMSG_MUG_SIZERANGE);

    int scaleIter = (destScale - scale) / FRAGMSG_ITERATION;
    int alphaIter = (destAlpha - alpha) / FRAGMSG_ITERATION;
    int xiter = (destX - x) / FRAGMSG_ITERATION;
    int yiter = (destY - y) / FRAGMSG_ITERATION;

    int multiFragX = -100;
    int multiFragY = 16;

    int update = 0;

    int canRespawn = getPlayerLivesLeft(who) > 0;

    int team = GetPlayerInfo(who, PLAYERINFO_TEAM);
    int cyan, blue;

    if(team == 255) {
        cyan = 4;
        blue = 200;
    } else {
        cyan = ACS_NamedExecuteWithResult("core_getteampalette", team, 0);
        blue = ACS_NamedExecuteWithResult("core_getteampalette", team, 1);
    }

    do
    {
        if(GetGamemodeState() != GAMESTATE_INPROGRESS)
            terminate;

        if(deathTime != lastDeath[pln])
            terminate;

        if(timer() > endTime)
            terminate;
        
        // update
        if(fragTime != lastFrag[pln]) {
            update++;
            fragTime = lastFrag[pln];
            endTime = fragTime + FRAGMSG_TIME + FRAGMSG_FADETIME;

            destScale /= 2;
            destAlpha = 1.0;
            destX += multiFragX;
            multiFragX /= 2;
            destY += FixedDiv(multiFragY, destScale);
            multiFragY -= FixedDiv(multiFragY, destScale);

            scaleIter = (destScale - scale) / FRAGMSG_ITERATION;
            alphaIter = (destAlpha - alpha) / FRAGMSG_ITERATION;
            xiter = (destX - x) / FRAGMSG_ITERATION;
            yiter = (destY - y) / FRAGMSG_ITERATION;
        }

        if(timer() == endTime-FRAGMSG_FADETIME) {
            destAlpha = 0.0;
            alphaIter = (destAlpha - alpha) / FRAGMSG_FADETIME;
        }

        scale = bound(scale + scaleIter, destScale, scaleIter);
        alpha = bound(alpha + alphaIter, destAlpha, alphaIter);
        x = bound(x + xIter, destX, xIter);
        y = bound(y + yIter, destY, yIter);

        if(scale <= 0 || alpha <= 0) {
            terminate;
        }

        if(!dead) {
            if(infiniteRespawns) {
                displayIcon(respawnFrames[FRAGMSG_RESPAWNFRAMES-1], getNewUIId(), x, y, scale, scale, alpha, ALIGN_CENTER, ALIGN_CENTER);
            } else {
                if(timer() >= startTime + FRAGMSG_EXPLODE) {
                
                    int explodeFrame = timer() - (startTime + FRAGMSG_EXPLODE);
                    if(!canRespawn) {
                        if(explodeFrame < FRAGMSG_EXPLODEFRAMES) {
                            int explodeScale = FixedMul(scale, 0.25);
                            int explodeOffs = FixedMul(explodeScale, 30);
                            displayIcon(explodeFrames[explodeFrame], getNewUIId(), x+explodeOffs, y+explodeOffs, explodeScale, explodeScale, alpha, ALIGN_CENTER, ALIGN_CENTER);
                        }
                        displayIcon(skullIcons[0][cyan], getNewUIId(), x, y, scale, scale, alpha, ALIGN_CENTER, ALIGN_CENTER);
                        displayIcon(skullIcons[1][blue], getNewUIId(), x, y, scale, scale, alpha, ALIGN_CENTER, ALIGN_CENTER);
                        displayIcon("UIXMGSCR", getNewUIId(), x, y, scale, scale, FixedMul(alpha, 0.5), ALIGN_CENTER, ALIGN_CENTER);
                    } else {
                        displayIcon(respawnFrames[min(explodeFrame, FRAGMSG_RESPAWNFRAMES-1)], getNewUIId(), x, y, scale, scale, alpha, ALIGN_CENTER, ALIGN_CENTER);
                    }
                }
            }
            displayIcon(skullIcons[0][cyan], getNewUIId(), x, y, scale, scale, alpha, ALIGN_CENTER, ALIGN_CENTER);
            displayIcon(skullIcons[1][blue], getNewUIId(), x, y, scale, scale, alpha, ALIGN_CENTER, ALIGN_CENTER);
        }

        displayIcon(mug, getNewUIId(), x, y, scale, scale, alpha, ALIGN_CENTER, ALIGN_CENTER);

        delay(1);
    }
    while(true);
}

function int lerp(int a, int b, int alpha)
{
    return FixedMul(a, 1.0 - alpha) + FixedMul(b, alpha);
}

function int bound(int n, int cap, int sign)
{
    return sign < 0 ? max(n, cap) : min(n, cap);
}
