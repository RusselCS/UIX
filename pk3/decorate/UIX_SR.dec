actor UIXSRWatcher
{
    +MISSILE
    -SOLID
    +NOCLIP
    +NOINTERACTION
    +NOGRAVITY
    +DONTBLAST
    +DONTREFLECT
    +THRUACTORS
    +NOBLOCKMAP
    renderstyle none
    radius 2
    height 2
    States
    {
    Spawn:
        TNT1 A 0
        goto SpawnWait
    SpawnWait:
        TNT1 A 1
        loop
    SpawnSR:
        TNT1 A 0 A_GiveToTarget("UIXSREffect_P", 1)
        TNT1 A 0 // A_GiveToTarget("UIXSRWalkFaster", 1) 
        TNT1 A 3
        loop
    Death:
        TNT1 A 0
        stop
    }
}

const int UIXSR_HORZ = 48;
const int UIXSR_VERT = 48;

actor UIXSRWalkFaster : CustomInventory
{
    States
    {
    Pickup:
        TNT1 A 0 A_SetTics(2)
        stop
    }
}

actor UIXSREffect_P : CustomInventory
{
    States
    {
    Pickup:
        TNT1 A 0 A_SpawnItemEx("UIXSREffect",
                -(40*2.5),//+frandom(-UIXSR_HORZ, UIXSR_HORZ),
                frandom(-UIXSR_HORZ, UIXSR_HORZ),
                -(2*momz)+frandom(0, UIXSR_VERT),
                0, 0, 0, CallACS("UIXSR_MOMVEC"),
                SXF_ABSOLUTEANGLE|SXF_TRANSFERTRANSLATION)
        // TNT1 A 0 A_GiveInventory("UIXSREffect_PU", 1)
        stop
    }
}

// Gondola's method. It's cheap, but effective.
actor UIXSREffect_PU : PowerSpeed { speed 1.0 powerup.duration -1 }

// Change sprites to use 3D offsets instead of sprite offsets
// 1 pixel offset = 2.5 map units

actor UIXSREffect : BasicGraphicEffect
{
    Speed 100
    var int user_x;
    var int user_y;
    var int user_z;
    renderstyle "translucent"
    //alpha 0.7
    scale 2.5
    States
    {
    Spawn:
        TNT1 A 0
        TNT1 A 0 ACS_NamedExecuteWithResult("UIXSR_SRParticles")
        TNT1 A 0 ACS_NamedExecuteWithResult("UIXSR_RelOffsets")
        TNT1 A 1
        UXSR AA 1 A_Warp(AAPTR_TARGET,user_x,user_y,user_z,angle,WARPF_COPYINTERPOLATION|WARPF_ABSOLUTEOFFSET|WARPF_ABSOLUTEANGLE)
        UXSR A 0 A_SetUserVar(user_x, user_x + 14*scalex*cos(angle))
        UXSR A 0 A_SetUserVar(user_y, user_y + 14*scalex*sin(angle))
        UXSR BB 1 A_Warp(AAPTR_TARGET,user_x,user_y,user_z,angle,WARPF_COPYINTERPOLATION|WARPF_ABSOLUTEOFFSET|WARPF_ABSOLUTEANGLE)
        UXSR A 0 A_SetUserVar(user_x, user_x + 22*scalex*cos(angle))
        UXSR A 0 A_SetUserVar(user_y, user_y + 22*scalex*sin(angle))
        UXSR CC 1 A_Warp(AAPTR_TARGET,user_x,user_y,user_z,angle,WARPF_COPYINTERPOLATION|WARPF_ABSOLUTEOFFSET|WARPF_ABSOLUTEANGLE)
        UXSR A 0 A_SetUserVar(user_x, user_x +  4*scalex*cos(angle))
        UXSR A 0 A_SetUserVar(user_y, user_y +  4*scalex*sin(angle))
        UXSR DD 1 A_Warp(AAPTR_TARGET,user_x,user_y,user_z,angle,WARPF_COPYINTERPOLATION|WARPF_ABSOLUTEOFFSET|WARPF_ABSOLUTEANGLE)
        UXSR A 0 A_SetUserVar(user_x, user_x +  2*scalex*cos(angle))
        UXSR A 0 A_SetUserVar(user_y, user_y +  2*scalex*sin(angle))
        UXSR EE 1 A_Warp(AAPTR_TARGET,user_x,user_y,user_z,angle,WARPF_COPYINTERPOLATION|WARPF_ABSOLUTEOFFSET|WARPF_ABSOLUTEANGLE)
        stop
    }
}
